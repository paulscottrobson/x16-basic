
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -o basic_nocode.prg -L basic.lst -l basic.lbl basic.asm
; Sat Feb 08 16:07:29 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: code/data.asm

.0000					codePtr:
>0000							.word 	?
.0002					zTemp1:
>0002							.word 	?
.0004					zTemp2:
>0004							.word 	?
.0006					zTemp3:
>0006							.word 	?
.0008					zTemp4:
>0008							.word 	?
.000a					signCount:
>000a							.byte 	?
.000b					convertPtr:
>000b							.byte 	?
=$600					xsStatus = $600								; expression stack (must all fit in one page)
=$20					stackSize = $20 							; stack elements allowed (max 256/6)
=1568					xsAddrLow = xsStatus+stackSize 				; these values are shared depending on type.
=1600					xsAddrHigh = xsStatus+stackSize*2
=1568					xsIntLow = xsAddrLow
=1600					xsIntHigh = xsAddrHigh
=1568					xsMantissa3 = xsAddrLow
=1600					xsMantissa2 = xsAddrHigh
=1632					xsMantissa1 = xsStatus+stackSize*3
=1664					xsMantissa0 = xsStatus+stackSize*4
=1696					xsExponent = xsStatus+stackSize*5
=$700					variables = $700							; 26 variables A-Z. Must be on a page boundary.
=$800					textBuffer = $800							; text buffer for input command lines.
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8

;******  Return to file: basic.asm


;******  Processing file: code/macros.asm


;******  Return to file: basic.asm

.1000	4c 12 1a	jmp $1a12			jmp 	ColdStart

;******  Processing file: files.asm

.1003					TokenTextTable:

;******  Processing file: generated/tokentext.inc

>1003	05 28 45 4f 4c a9			.byte	$05,$28,$45,$4f,$4c,$a9                  ; $80 : (eol)
>1009	01 a9					.byte	$01,$a9                                  ; $81 : )
>100b	01 ba					.byte	$01,$ba                                  ; $82 : :
>100d	01 ac					.byte	$01,$ac                                  ; $83 : ,
>100f	01 bb					.byte	$01,$bb                                  ; $84 : ;
>1011	01 a3					.byte	$01,$a3                                  ; $85 : #
>1013	03 41 4e c4				.byte	$03,$41,$4e,$c4                          ; $86 : and
>1017	02 4f d2				.byte	$02,$4f,$d2                              ; $87 : or
>101a	03 58 4f d2				.byte	$03,$58,$4f,$d2                          ; $88 : xor
>101e	01 be					.byte	$01,$be                                  ; $89 : >
>1020	02 3e bd				.byte	$02,$3e,$bd                              ; $8a : >=
>1023	01 bc					.byte	$01,$bc                                  ; $8b : <
>1025	02 3c bd				.byte	$02,$3c,$bd                              ; $8c : <=
>1028	01 bd					.byte	$01,$bd                                  ; $8d : =
>102a	02 3c be				.byte	$02,$3c,$be                              ; $8e : <>
>102d	01 ab					.byte	$01,$ab                                  ; $8f : +
>102f	01 ad					.byte	$01,$ad                                  ; $90 : -
>1031	01 aa					.byte	$01,$aa                                  ; $91 : *
>1033	01 af					.byte	$01,$af                                  ; $92 : /
>1035	03 4d 4f c4				.byte	$03,$4d,$4f,$c4                          ; $93 : mod
>1039	04 4c 45 4e a8				.byte	$04,$4c,$45,$4e,$a8                      ; $94 : len(
>103e	04 52 4e 44 a8				.byte	$04,$52,$4e,$44,$a8                      ; $95 : rnd(
>1043	04 41 53 43 a8				.byte	$04,$41,$53,$43,$a8                      ; $96 : asc(
>1048	05 43 48 52 24 a8			.byte	$05,$43,$48,$52,$24,$a8                  ; $97 : chr$(
>104e	04 56 41 4c a8				.byte	$04,$56,$41,$4c,$a8                      ; $98 : val(
>1053	05 53 54 52 24 a8			.byte	$05,$53,$54,$52,$24,$a8                  ; $99 : str$(
>1059	04 53 50 43 a8				.byte	$04,$53,$50,$43,$a8                      ; $9a : spc(
>105e	06 4c 45 46 54 24 a8			.byte	$06,$4c,$45,$46,$54,$24,$a8              ; $9b : left$(
>1065	05 4d 49 44 24 a8			.byte	$05,$4d,$49,$44,$24,$a8                  ; $9c : mid$(
>106b	07 52 49 47 48 54 24 a8			.byte	$07,$52,$49,$47,$48,$54,$24,$a8          ; $9d : right$(
>1073	04 41 42 53 a8				.byte	$04,$41,$42,$53,$a8                      ; $9e : abs(
>1078	04 53 47 4e a8				.byte	$04,$53,$47,$4e,$a8                      ; $9f : sgn(
>107d	04 49 4e 54 a8				.byte	$04,$49,$4e,$54,$a8                      ; $a0 : int(
>1082	05 44 45 45 4b a8			.byte	$05,$44,$45,$45,$4b,$a8                  ; $a1 : deek(
>1088	05 50 45 45 4b a8			.byte	$05,$50,$45,$45,$4b,$a8                  ; $a2 : peek(
>108e	06 56 50 45 45 4b a8			.byte	$06,$56,$50,$45,$45,$4b,$a8              ; $a3 : vpeek(
>1095	01 a8					.byte	$01,$a8                                  ; $a4 : (
>1097	01 a5					.byte	$01,$a5                                  ; $a5 : %
>1099	01 a4					.byte	$01,$a4                                  ; $a6 : $
>109b	02 49 c6				.byte	$02,$49,$c6                              ; $a7 : if
>109e	06 52 45 50 45 41 d4			.byte	$06,$52,$45,$50,$45,$41,$d4              ; $a8 : repeat
>10a5	03 46 4f d2				.byte	$03,$46,$4f,$d2                          ; $a9 : for
>10a9	05 57 48 49 4c c5			.byte	$05,$57,$48,$49,$4c,$c5                  ; $aa : while
>10af	04 43 41 53 c5				.byte	$04,$43,$41,$53,$c5                      ; $ab : case
>10b4	04 54 48 45 ce				.byte	$04,$54,$48,$45,$ce                      ; $ac : then
>10b9	05 45 4e 44 49 c6			.byte	$05,$45,$4e,$44,$49,$c6                  ; $ad : endif
>10bf	05 55 4e 54 49 cc			.byte	$05,$55,$4e,$54,$49,$cc                  ; $ae : until
>10c5	04 4e 45 58 d4				.byte	$04,$4e,$45,$58,$d4                      ; $af : next
>10ca	08 45 4e 44 57 48 49 4c			.byte	$08,$45,$4e,$44,$57,$48,$49,$4c,$c5      ; $b0 : endwhile
>10d2	c5
>10d3	07 45 4e 44 43 41 53 c5			.byte	$07,$45,$4e,$44,$43,$41,$53,$c5          ; $b1 : endcase
>10db	02 54 cf				.byte	$02,$54,$cf                              ; $b2 : to
>10de	04 53 54 45 d0				.byte	$04,$53,$54,$45,$d0                      ; $b3 : step
>10e3	04 50 52 4f c3				.byte	$04,$50,$52,$4f,$c3                      ; $b4 : proc
>10e8	07 45 4e 44 50 52 4f c3			.byte	$07,$45,$4e,$44,$50,$52,$4f,$c3          ; $b5 : endproc
>10f0	04 43 41 4c cc				.byte	$04,$43,$41,$4c,$cc                      ; $b6 : call
>10f5	05 4c 4f 43 41 cc			.byte	$05,$4c,$4f,$43,$41,$cc                  ; $b7 : local
>10fb	03 52 55 ce				.byte	$03,$52,$55,$ce                          ; $b8 : run
>10ff	04 53 54 4f d0				.byte	$04,$53,$54,$4f,$d0                      ; $b9 : stop
>1104	03 45 4e c4				.byte	$03,$45,$4e,$c4                          ; $ba : end
>1108	05 50 52 49 4e d4			.byte	$05,$50,$52,$49,$4e,$d4                  ; $bb : print
>110e	05 49 4e 50 55 d4			.byte	$05,$49,$4e,$50,$55,$d4                  ; $bc : input
>1114	04 57 48 45 ce				.byte	$04,$57,$48,$45,$ce                      ; $bd : when
>1119	07 44 45 46 41 55 4c d4			.byte	$07,$44,$45,$46,$41,$55,$4c,$d4          ; $be : default
>1121	03 4c 45 d4				.byte	$03,$4c,$45,$d4                          ; $bf : let
>1125	06 4f 50 54 49 4f ce			.byte	$06,$4f,$50,$54,$49,$4f,$ce              ; $c0 : option
>112c	04 4c 49 53 d4				.byte	$04,$4c,$49,$53,$d4                      ; $c1 : list
>1131	04 4c 4f 41 c4				.byte	$04,$4c,$4f,$41,$c4                      ; $c2 : load
>1136	04 53 41 56 c5				.byte	$04,$53,$41,$56,$c5                      ; $c3 : save
>113b	03 4e 45 d7				.byte	$03,$4e,$45,$d7                          ; $c4 : new
>113f	03 4f 4c c4				.byte	$03,$4f,$4c,$c4                          ; $c5 : old
>1143	04 50 4f 4b c5				.byte	$04,$50,$4f,$4b,$c5                      ; $c6 : poke
>1148	04 44 4f 4b c5				.byte	$04,$44,$4f,$4b,$c5                      ; $c7 : doke
>114d	05 56 50 4f 4b c5			.byte	$05,$56,$50,$4f,$4b,$c5                  ; $c8 : vpoke
>1153	03 52 45 cd				.byte	$03,$52,$45,$cd                          ; $c9 : rem
>1157	04 47 4f 54 cf				.byte	$04,$47,$4f,$54,$cf                      ; $ca : goto
>115c	05 47 4f 53 55 c2			.byte	$05,$47,$4f,$53,$55,$c2                  ; $cb : gosub
>1162	03 53 59 d3				.byte	$03,$53,$59,$d3                          ; $cc : sys
>1166	06 52 45 54 55 52 ce			.byte	$06,$52,$45,$54,$55,$52,$ce              ; $cd : return
>116d	06 41 53 53 45 52 d4			.byte	$06,$41,$53,$53,$45,$52,$d4              ; $ce : assert
>1174	02 4f ce				.byte	$02,$4f,$ce                              ; $cf : on
>1177	04 4f 50 45 ce				.byte	$04,$4f,$50,$45,$ce                      ; $d0 : open
>117c	05 43 4c 4f 53 c5			.byte	$05,$43,$4c,$4f,$53,$c5                  ; $d1 : close
>1182	03 44 49 d2				.byte	$03,$44,$49,$d2                          ; $d2 : dir
>1186	03 44 49 cd				.byte	$03,$44,$49,$cd                          ; $d3 : dim
>118a	04 52 45 41 c4				.byte	$04,$52,$45,$41,$c4                      ; $d4 : read
>118f	04 44 41 54 c1				.byte	$04,$44,$41,$54,$c1                      ; $d5 : data
>1194	07 52 45 53 54 4f 52 c5			.byte	$07,$52,$45,$53,$54,$4f,$52,$c5          ; $d6 : restore
>119c	00					.byte	$00

;******  Return to file: files.asm

.119d					TokenControlByteTable:

;******  Processing file: generated/tokencbyte.inc

>119d	00					.byte	$00		; $80 : (eol)
>119e	00					.byte	$00		; $81 : )
>119f	00					.byte	$00		; $82 : :
>11a0	00					.byte	$00		; $83 : ,
>11a1	00					.byte	$00		; $84 : ;
>11a2	00					.byte	$00		; $85 : #
>11a3	11					.byte	$11		; $86 : and
>11a4	11					.byte	$11		; $87 : or
>11a5	11					.byte	$11		; $88 : xor
>11a6	12					.byte	$12		; $89 : >
>11a7	12					.byte	$12		; $8a : >=
>11a8	12					.byte	$12		; $8b : <
>11a9	12					.byte	$12		; $8c : <=
>11aa	12					.byte	$12		; $8d : =
>11ab	12					.byte	$12		; $8e : <>
>11ac	13					.byte	$13		; $8f : +
>11ad	13					.byte	$13		; $90 : -
>11ae	14					.byte	$14		; $91 : *
>11af	14					.byte	$14		; $92 : /
>11b0	14					.byte	$14		; $93 : mod
>11b1	40					.byte	$40		; $94 : len(
>11b2	40					.byte	$40		; $95 : rnd(
>11b3	40					.byte	$40		; $96 : asc(
>11b4	40					.byte	$40		; $97 : chr$(
>11b5	40					.byte	$40		; $98 : val(
>11b6	40					.byte	$40		; $99 : str$(
>11b7	40					.byte	$40		; $9a : spc(
>11b8	40					.byte	$40		; $9b : left$(
>11b9	40					.byte	$40		; $9c : mid$(
>11ba	40					.byte	$40		; $9d : right$(
>11bb	40					.byte	$40		; $9e : abs(
>11bc	40					.byte	$40		; $9f : sgn(
>11bd	40					.byte	$40		; $a0 : int(
>11be	40					.byte	$40		; $a1 : deek(
>11bf	40					.byte	$40		; $a2 : peek(
>11c0	40					.byte	$40		; $a3 : vpeek(
>11c1	40					.byte	$40		; $a4 : (
>11c2	40					.byte	$40		; $a5 : %
>11c3	40					.byte	$40		; $a6 : $
>11c4	82					.byte	$82		; $a7 : if
>11c5	82					.byte	$82		; $a8 : repeat
>11c6	82					.byte	$82		; $a9 : for
>11c7	82					.byte	$82		; $aa : while
>11c8	82					.byte	$82		; $ab : case
>11c9	80					.byte	$80		; $ac : then
>11ca	80					.byte	$80		; $ad : endif
>11cb	80					.byte	$80		; $ae : until
>11cc	80					.byte	$80		; $af : next
>11cd	80					.byte	$80		; $b0 : endwhile
>11ce	80					.byte	$80		; $b1 : endcase
>11cf	81					.byte	$81		; $b2 : to
>11d0	81					.byte	$81		; $b3 : step
>11d1	81					.byte	$81		; $b4 : proc
>11d2	81					.byte	$81		; $b5 : endproc
>11d3	81					.byte	$81		; $b6 : call
>11d4	81					.byte	$81		; $b7 : local
>11d5	81					.byte	$81		; $b8 : run
>11d6	81					.byte	$81		; $b9 : stop
>11d7	81					.byte	$81		; $ba : end
>11d8	81					.byte	$81		; $bb : print
>11d9	81					.byte	$81		; $bc : input
>11da	81					.byte	$81		; $bd : when
>11db	81					.byte	$81		; $be : default
>11dc	81					.byte	$81		; $bf : let
>11dd	81					.byte	$81		; $c0 : option
>11de	81					.byte	$81		; $c1 : list
>11df	81					.byte	$81		; $c2 : load
>11e0	81					.byte	$81		; $c3 : save
>11e1	81					.byte	$81		; $c4 : new
>11e2	81					.byte	$81		; $c5 : old
>11e3	81					.byte	$81		; $c6 : poke
>11e4	81					.byte	$81		; $c7 : doke
>11e5	81					.byte	$81		; $c8 : vpoke
>11e6	81					.byte	$81		; $c9 : rem
>11e7	81					.byte	$81		; $ca : goto
>11e8	81					.byte	$81		; $cb : gosub
>11e9	81					.byte	$81		; $cc : sys
>11ea	81					.byte	$81		; $cd : return
>11eb	81					.byte	$81		; $ce : assert
>11ec	81					.byte	$81		; $cf : on
>11ed	81					.byte	$81		; $d0 : open
>11ee	81					.byte	$81		; $d1 : close
>11ef	81					.byte	$81		; $d2 : dir
>11f0	81					.byte	$81		; $d3 : dim
>11f1	81					.byte	$81		; $d4 : read
>11f2	81					.byte	$81		; $d5 : data
>11f3	81					.byte	$81		; $d6 : restore

;******  Return to file: files.asm

>11f4							.align 	2 				; defense against old 6502 bug may be present.
.11f4					TokenVectors:

;******  Processing file: generated/tokenvectors.inc

>11f4	a2 12					.word	SyntaxError             		; $80 : (eol)
>11f6	a2 12					.word	SyntaxError             		; $81 : )
>11f8	a2 12					.word	SyntaxError             		; $82 : :
>11fa	a2 12					.word	SyntaxError             		; $83 : ,
>11fc	a2 12					.word	SyntaxError             		; $84 : ;
>11fe	a2 12					.word	SyntaxError             		; $85 : #
>1200	03 17					.word	BinaryAnd               		; $86 : and
>1202	21 17					.word	BinaryOr                		; $87 : or
>1204	3f 17					.word	BinaryXor               		; $88 : xor
>1206	61 18					.word	Compare_Greater         		; $89 : >
>1208	54 18					.word	Compare_GreaterEquals   		; $8a : >=
>120a	57 18					.word	Compare_Less            		; $8b : <
>120c	5e 18					.word	Compare_LessEquals      		; $8c : <=
>120e	3d 18					.word	Compare_Equals          		; $8d : =
>1210	40 18					.word	Compare_NotEquals       		; $8e : <>
>1212	ba 16					.word	BinaryAdd               		; $8f : +
>1214	e4 16					.word	BinarySub               		; $90 : -
>1216	5d 17					.word	Multiply16x16           		; $91 : *
>1218	9e 17					.word	Divide16x16             		; $92 : /
>121a	ad 17					.word	Modulus16x16            		; $93 : mod
>121c	b0 19					.word	StringLength            		; $94 : len(
>121e	a2 12					.word	SyntaxError             		; $95 : rnd(
>1220	a2 12					.word	SyntaxError             		; $96 : asc(
>1222	a2 12					.word	SyntaxError             		; $97 : chr$(
>1224	a2 12					.word	SyntaxError             		; $98 : val(
>1226	a2 12					.word	SyntaxError             		; $99 : str$(
>1228	a2 12					.word	SyntaxError             		; $9a : spc(
>122a	a2 12					.word	SyntaxError             		; $9b : left$(
>122c	a2 12					.word	SyntaxError             		; $9c : mid$(
>122e	a2 12					.word	SyntaxError             		; $9d : right$(
>1230	5f 19					.word	AbsoluteValue           		; $9e : abs(
>1232	7b 19					.word	SignValue               		; $9f : sgn(
>1234	a2 12					.word	SyntaxError             		; $a0 : int(
>1236	a2 12					.word	SyntaxError             		; $a1 : deek(
>1238	a2 12					.word	SyntaxError             		; $a2 : peek(
>123a	a2 12					.word	SyntaxError             		; $a3 : vpeek(
>123c	58 19					.word	Parenthesis             		; $a4 : (
>123e	54 19					.word	Dummy_Binary            		; $a5 : %
>1240	54 19					.word	Dummy_Hex               		; $a6 : $
>1242	a2 12					.word	SyntaxError             		; $a7 : if
>1244	a2 12					.word	SyntaxError             		; $a8 : repeat
>1246	a2 12					.word	SyntaxError             		; $a9 : for
>1248	a2 12					.word	SyntaxError             		; $aa : while
>124a	a2 12					.word	SyntaxError             		; $ab : case
>124c	a2 12					.word	SyntaxError             		; $ac : then
>124e	a2 12					.word	SyntaxError             		; $ad : endif
>1250	a2 12					.word	SyntaxError             		; $ae : until
>1252	a2 12					.word	SyntaxError             		; $af : next
>1254	a2 12					.word	SyntaxError             		; $b0 : endwhile
>1256	a2 12					.word	SyntaxError             		; $b1 : endcase
>1258	a2 12					.word	SyntaxError             		; $b2 : to
>125a	a2 12					.word	SyntaxError             		; $b3 : step
>125c	a2 12					.word	SyntaxError             		; $b4 : proc
>125e	a2 12					.word	SyntaxError             		; $b5 : endproc
>1260	a2 12					.word	SyntaxError             		; $b6 : call
>1262	a2 12					.word	SyntaxError             		; $b7 : local
>1264	1d 15					.word	Command_RUN             		; $b8 : run
>1266	5d 15					.word	Command_STOP            		; $b9 : stop
>1268	5a 15					.word	Command_END             		; $ba : end
>126a	a2 12					.word	SyntaxError             		; $bb : print
>126c	a2 12					.word	SyntaxError             		; $bc : input
>126e	a2 12					.word	SyntaxError             		; $bd : when
>1270	a2 12					.word	SyntaxError             		; $be : default
>1272	a2 12					.word	SyntaxError             		; $bf : let
>1274	a2 12					.word	SyntaxError             		; $c0 : option
>1276	a2 12					.word	SyntaxError             		; $c1 : list
>1278	a2 12					.word	SyntaxError             		; $c2 : load
>127a	a2 12					.word	SyntaxError             		; $c3 : save
>127c	a2 12					.word	SyntaxError             		; $c4 : new
>127e	a2 12					.word	SyntaxError             		; $c5 : old
>1280	a2 12					.word	SyntaxError             		; $c6 : poke
>1282	a2 12					.word	SyntaxError             		; $c7 : doke
>1284	a2 12					.word	SyntaxError             		; $c8 : vpoke
>1286	10 15					.word	Command_Rem             		; $c9 : rem
>1288	97 14					.word	Command_GOTO            		; $ca : goto
>128a	a2 12					.word	SyntaxError             		; $cb : gosub
>128c	a2 12					.word	SyntaxError             		; $cc : sys
>128e	a2 12					.word	SyntaxError             		; $cd : return
>1290	ed 14					.word	Command_Assert          		; $ce : assert
>1292	a2 12					.word	SyntaxError             		; $cf : on
>1294	a2 12					.word	SyntaxError             		; $d0 : open
>1296	a2 12					.word	SyntaxError             		; $d1 : close
>1298	a2 12					.word	SyntaxError             		; $d2 : dir
>129a	a2 12					.word	SyntaxError             		; $d3 : dim
>129c	a2 12					.word	SyntaxError             		; $d4 : read
>129e	a2 12					.word	SyntaxError             		; $d5 : data
>12a0	a2 12					.word	SyntaxError             		; $d6 : restore

;******  Return to file: files.asm


;******  Processing file: generated/tokenconst.inc

=$d7					TOK_LAST_TOKEN = $d7
=$80					TOK_LPARENEOLRPAREN = $80
=$81					TOK_RPAREN = $81
=$82					TOK_COLON = $82
=$83					TOK_COMMA = $83
=$84					TOK_SEMICOLON = $84
=$85					TOK_HASH = $85
=$86					TOK_AND = $86
=$87					TOK_OR = $87
=$88					TOK_XOR = $88
=$89					TOK_GREATER = $89
=$8a					TOK_GREATEREQUAL = $8a
=$8b					TOK_LESS = $8b
=$8c					TOK_LESSEQUAL = $8c
=$8d					TOK_EQUAL = $8d
=$8e					TOK_LESSGREATER = $8e
=$8f					TOK_PLUS = $8f
=$90					TOK_MINUS = $90
=$91					TOK_STAR = $91
=$92					TOK_SLASH = $92
=$93					TOK_MOD = $93
=$94					TOK_LENLPAREN = $94
=$95					TOK_RNDLPAREN = $95
=$96					TOK_ASCLPAREN = $96
=$97					TOK_CHRDOLLARLPAREN = $97
=$98					TOK_VALLPAREN = $98
=$99					TOK_STRDOLLARLPAREN = $99
=$9a					TOK_SPCLPAREN = $9a
=$9b					TOK_LEFTDOLLARLPAREN = $9b
=$9c					TOK_MIDDOLLARLPAREN = $9c
=$9d					TOK_RIGHTDOLLARLPAREN = $9d
=$9e					TOK_ABSLPAREN = $9e
=$9f					TOK_SGNLPAREN = $9f
=$a0					TOK_INTLPAREN = $a0
=$a1					TOK_DEEKLPAREN = $a1
=$a2					TOK_PEEKLPAREN = $a2
=$a3					TOK_VPEEKLPAREN = $a3
=$a4					TOK_LPAREN = $a4
=$a5					TOK_PERCENT = $a5
=$a6					TOK_DOLLAR = $a6
=$a7					TOK_IF = $a7
=$a8					TOK_REPEAT = $a8
=$a9					TOK_FOR = $a9
=$aa					TOK_WHILE = $aa
=$ab					TOK_CASE = $ab
=$ac					TOK_THEN = $ac
=$ad					TOK_ENDIF = $ad
=$ae					TOK_UNTIL = $ae
=$af					TOK_NEXT = $af
=$b0					TOK_ENDWHILE = $b0
=$b1					TOK_ENDCASE = $b1
=$b2					TOK_TO = $b2
=$b3					TOK_STEP = $b3
=$b4					TOK_PROC = $b4
=$b5					TOK_ENDPROC = $b5
=$b6					TOK_CALL = $b6
=$b7					TOK_LOCAL = $b7
=$b8					TOK_RUN = $b8
=$b9					TOK_STOP = $b9
=$ba					TOK_END = $ba
=$bb					TOK_PRINT = $bb
=$bc					TOK_INPUT = $bc
=$bd					TOK_WHEN = $bd
=$be					TOK_DEFAULT = $be
=$bf					TOK_LET = $bf
=$c0					TOK_OPTION = $c0
=$c1					TOK_LIST = $c1
=$c2					TOK_LOAD = $c2
=$c3					TOK_SAVE = $c3
=$c4					TOK_NEW = $c4
=$c5					TOK_OLD = $c5
=$c6					TOK_POKE = $c6
=$c7					TOK_DOKE = $c7
=$c8					TOK_VPOKE = $c8
=$c9					TOK_REM = $c9
=$ca					TOK_GOTO = $ca
=$cb					TOK_GOSUB = $cb
=$cc					TOK_SYS = $cc
=$cd					TOK_RETURN = $cd
=$ce					TOK_ASSERT = $ce
=$cf					TOK_ON = $cf
=$d0					TOK_OPEN = $d0
=$d1					TOK_CLOSE = $d1
=$d2					TOK_DIR = $d2
=$d3					TOK_DIM = $d3
=$d4					TOK_READ = $d4
=$d5					TOK_DATA = $d5
=$d6					TOK_RESTORE = $d6

;******  Return to file: files.asm


;******  Processing file: code/error.asm

.12a2					SyntaxError:
.12a2	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>12a5	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",0
>12ad	72 72 6f 72 00
.12b2					TypeMismatch:
.12b2	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>12b5	54 79 70 65 20 4d 69 73				.text 	"Type Mismatch",0
>12bd	6d 61 74 63 68 00
.12c3					ParameterError:
.12c3	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>12c6	50 61 72 61 6d 65 74 65				.text 	"Parameter",0
>12ce	72 00
.12d0					ErrorHandler:
.12d0	68		pla				pla 								; get message address
.12d1	7a		ply				ply
.12d2	1a		inc a				inc 	a
.12d3	d0 01		bne $12d6			bne 	_EHNoCarry
.12d5	c8		iny				iny
.12d6					_EHNoCarry:
.12d6	20 f8 13	jsr $13f8			jsr 	EXPrintString
.12d9	a0 01		ldy #$01			ldy 	#1 							; check if there is a line #
.12db	b1 00		lda ($00),y			lda 	(codePtr),y
.12dd	c8		iny				iny
.12de	11 00		ora ($00),y			ora 	(codePtr),y
.12e0	f0 14		beq $12f6			beq 	_EHNoLine
.12e2	a9 00		lda #$00			lda 	#_EHMsg2 & $FF 				; print " at "
.12e4	a0 13		ldy #$13			ldy 	#_EHMsg2 >> 8
.12e6	20 f8 13	jsr $13f8			jsr 	EXPrintString
.12e9	a0 02		ldy #$02			ldy 	#2 							; print line number
.12eb	b1 00		lda ($00),y			lda 	(codePtr),y
.12ed	48		pha				pha
.12ee	88		dey				dey
.12ef	b1 00		lda ($00),y			lda 	(codePtr),y
.12f1	7a		ply				ply
.12f2	18		clc				clc
.12f3	20 e2 18	jsr $18e2			jsr 	PrintYA
.12f6					_EHNoLine:
.12f6	a9 0d		lda #$0d			lda 	#13
.12f8	20 31 13	jsr $1331			jsr 	ExternPrint
.12fb	80 fe		bra $12fb	_h1:	bra 	_h1
.12fd	4c 22 1a	jmp $1a22			jmp 	WarmStart
.1300					_EHMsg2:
>1300	20 61 74 20 00					.text 	" at ",0

;******  Return to file: files.asm


;******  Processing file: code/extern.asm

.1305					ExternInitialise:
.1305	a9 90		lda #$90			lda 	#144 						; set colour
.1307	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.130a	a9 01		lda #$01			lda 	#$01
.130c	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.130f	a9 0e		lda #$0e			lda 	#14							; lower case
.1311	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1314	a9 93		lda #$93			lda 	#147 						; clear screen
.1316	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1319	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.131b	4c 3d 13	jmp $133d			jmp 	ExternColour
.131e					ExternCheckBreak:
.131e	da		phx				phx 								; make sure we keep XY
.131f	5a		phy				phy
.1320	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.1323	f0 03		beq $1328			beq		_ECBExit 					; stopped
.1325	7a		ply				ply 								; restore and exit.
.1326	fa		plx				plx
.1327	60		rts				rts
.1328					_ECBExit:
.1328	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>132b	42 72 65 61 6b 00				.text 	"Break",0
.1331					ExternPrint:
.1331	48		pha				pha
.1332	da		phx				phx
.1333	5a		phy				phy
.1334	29 7f		and #$7f			and 	#$7F
.1336	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1339	7a		ply				ply
.133a	fa		plx				plx
.133b	68		pla				pla
.133c	60		rts				rts
.133d					ExternColour:
.133d	48		pha				pha
.133e	da		phx				phx
.133f	48		pha				pha
.1340	29 08		and #$08			and 	#8
.1342	0a		asl a				asl 	a
.1343	0a		asl a				asl 	a
.1344	0a		asl a				asl 	a
.1345	0a		asl a				asl 	a
.1346	49 92		eor #$92			eor 	#$92
.1348	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.134b	68		pla				pla
.134c	29 07		and #$07			and 	#7
.134e	aa		tax				tax
.134f	bd 58 13	lda $1358,x			lda 	_ECTable,x
.1352	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1355	fa		plx				plx
.1356	68		pla				pla
.1357	60		rts				rts
.1358					_ECTable:
>1358	90						.byte 	144
>1359	1c						.byte 	28
>135a	1e						.byte 	30
>135b	9e						.byte 	158
>135c	1f						.byte 	31
>135d	9c						.byte 	156
>135e	9f						.byte 	159
>135f	05						.byte 	5
.1360					ExternInput:
.1360	a9 00		lda #$00			lda 	#(textBuffer & $FF)
.1362	85 06		sta $06				sta 	zTemp3
.1364	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.1366	85 07		sta $07				sta 	zTemp3+1
.1368	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.136b	c9 0d		cmp #$0d			cmp 	#13
.136d	f0 0c		beq $137b			beq 	_EIExit
.136f	29 7f		and #$7f			and 	#$7F
.1371	92 06		sta ($06)			sta 	(zTemp3)
.1373	e6 06		inc $06				inc 	zTemp3
.1375	d0 f1		bne $1368			bne 	_EIRead
.1377	e6 07		inc $07				inc 	zTemp3+1
.1379	80 ed		bra $1368			bra 	_EIRead
.137b	a9 00		lda #$00	_EIExit:lda 	#0
.137d	92 06		sta ($06)			sta 	(zTemp3)
.137f	a9 0d		lda #$0d			lda 	#13
.1381	20 31 13	jsr $1331			jsr 	ExternPrint
.1384	60		rts				rts
.1385					ExternSave:
.1385	da		phx				phx
.1386	5a		phy				phy
.1387	85 04		sta $04				sta 	zTemp2 						; save start
.1389	84 05		sty $05				sty 	zTemp2+1
.138b	20 ed 13	jsr $13ed			jsr 	EXGetLength 				; get length of file into A
.138e	a6 06		ldx $06				ldx 	zTemp3
.1390	a4 07		ldy $07				ldy 	zTemp3+1
.1392	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1395	a9 01		lda #$01			lda 	#1
.1397	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1399	a0 00		ldy #$00			ldy 	#0
.139b	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.139e	a6 02		ldx $02				ldx 	zTemp1 						; end address
.13a0	a4 03		ldy $03				ldy 	zTemp1+1
.13a2	a9 04		lda #$04			lda 	#zTemp2
.13a4	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13a7	b0 03		bcs $13ac			bcs 	_ESSave
.13a9	7a		ply				ply
.13aa	fa		plx				plx
.13ab	60		rts				rts
.13ac					_ESSave:
.13ac	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>13af	4c 6f 61 64 20 46 61 69				.text 	"Load Failed",0
>13b7	6c 65 64 00
.13bb					ExternLoad:
.13bb	da		phx				phx 								; save XY
.13bc	5a		phy				phy
.13bd	48		pha				pha 								; save target
.13be	5a		phy				phy
.13bf	20 ed 13	jsr $13ed			jsr 	EXGetLength 				; get length of file into A
.13c2	a6 06		ldx $06				ldx 	zTemp3
.13c4	a4 07		ldy $07				ldy 	zTemp3+1
.13c6	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13c9	a9 01		lda #$01			lda 	#1
.13cb	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13cd	a0 00		ldy #$00			ldy 	#0
.13cf	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13d2	7a		ply				ply 								; restore target to YX and call load
.13d3	fa		plx				plx
.13d4	a9 00		lda #$00			lda 	#0 							; load command
.13d6	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.13d9	b0 03		bcs $13de			bcs 	_ESLoad
.13db	7a		ply				ply
.13dc	fa		plx				plx
.13dd	60		rts				rts
.13de					_ESLoad:
.13de	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>13e1	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>13e9	4c 45 44 00
.13ed					EXGetLength:
.13ed	5a		phy				phy
.13ee	a0 ff		ldy #$ff			ldy 	#255
.13f0	c8		iny		_EXGL0:	iny
.13f1	b1 06		lda ($06),y			lda 	(zTemp3),y
.13f3	d0 fb		bne $13f0			bne 	_EXGL0
.13f5	98		tya				tya
.13f6	7a		ply				ply
.13f7	60		rts				rts
.13f8					EXPrintString:
.13f8	48		pha				pha
.13f9	5a		phy				phy
.13fa	84 03		sty $03				sty 	zTemp1+1
.13fc	85 02		sta $02				sta 	zTemp1
.13fe	a0 00		ldy #$00			ldy 	#0
.1400					_EXPSLoop:
.1400	b1 02		lda ($02),y			lda 	(zTemp1),y
.1402	f0 13		beq $1417			beq 	_EXPSExit
.1404	29 7f		and #$7f			and 	#$7F
.1406	c9 61		cmp #$61			cmp 	#'a'
.1408	90 07		bcc $1411			bcc 	_EXPSNoLC
.140a	c9 7b		cmp #$7b			cmp 	#'z'+1
.140c	b0 03		bcs $1411			bcs 	_EXPSNoLC
.140e	38		sec				sec
.140f	e9 20		sbc #$20			sbc 	#32
.1411					_EXPSNoLC:
.1411	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1414	c8		iny				iny
.1415	80 e9		bra $1400			bra 	_EXPSLoop
.1417					_EXPSExit:
.1417	7a		ply				ply
.1418	68		pla				pla
.1419	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: code/syntax.asm

.141a					SyntaxCheckRightBracket:
.141a	b1 00		lda ($00),y			lda 	(codePtr),y
.141c	c8		iny				iny
.141d	c9 81		cmp #$81			cmp 	#TOK_RPAREN
.141f	d0 01		bne $1422			bne 	_SCRBError
.1421	60		rts				rts
.1422					_SCRBError:
.1422	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>1425	4d 69 73 73 69 6e 67 20				.text 	"Missing )",0
>142d	29 00
.142f					SyntaxCheckA:
.142f	d1 00		cmp ($00),y			cmp 	(codePtr),y
.1431	d0 02		bne $1435			bne 	_SCAError
.1433	c8		iny				iny
.1434	60		rts				rts
.1435					_SCAError:
.1435	4c a2 12	jmp $12a2			jmp 	SyntaxError

;******  Return to file: files.asm


;******  Processing file: commands/let.asm

.1438					Command_LET:
.1438	a2 00		ldx #$00			ldx 	#0 							; get the L-Expr
.143a	20 35 16	jsr $1635			jsr 	EvaluateTermAtX
.143d	bd 00 06	lda $0600,x			lda 	xsStatus,x 					; check to see if it is a reference.
.1440	6a		ror a				ror 	a
.1441	90 38		bcc $147b			bcc 	_CLTNotVar 					; if not, then we have an error.
.1443	a9 8d		lda #$8d			lda 	#TOK_EQUAL					; next token must be an equals.
.1445	20 2f 14	jsr $142f			jsr 	SyntaxCheckA
.1448	e8		inx				inx
.1449	20 67 15	jsr $1567			jsr 	EvaluateExpressionAtX 		; calculate the R-Expr in level 1.
.144c	ad 20 06	lda $0620			lda 	xsAddrLow
.144f	85 02		sta $02				sta 	zTemp1
.1451	ad 40 06	lda $0640			lda 	xsAddrHigh
.1454	85 03		sta $03				sta 	zTemp1+1
.1456	ad 00 06	lda $0600			lda 	xsStatus 					; check the same types.
.1459	4d 01 06	eor $0601			eor 	xsStatus+1
.145c	29 40		and #$40			and 	#$40
.145e	d0 1e		bne $147e			bne 	_CLTTypeMismatch
.1460	2c 00 06	bit $0600			bit 	xsStatus 					; string to string assignment
.1463	70 30		bvs $1495			bvs 	_CLTStringAssignment
.1465	30 2c		bmi $1493			bmi 	_CLTFloatAssignment
.1467	2c 01 06	bit $0601			bit 	xsStatus+1 					; are we assigning a float to an integer ?
.146a	70 15		bvs $1481			bvs 	_CLTFloatToInt 				; yes, then we do not auto truncate.
.146c	5a		phy				phy 								; copy value into reference.
.146d	ad 21 06	lda $0621			lda 	xsIntLow+1
.1470	92 02		sta ($02)			sta 	(zTemp1)
.1472	a0 01		ldy #$01			ldy 	#1
.1474	ad 41 06	lda $0641			lda 	xsIntHigh+1
.1477	91 02		sta ($02),y			sta 	(zTemp1),y
.1479	7a		ply				ply
.147a	60		rts				rts
.147b					_CLTNotVar:
.147b	4c a2 12	jmp $12a2			jmp 	SyntaxError
.147e					_CLTTypeMismatch:
.147e	4c b2 12	jmp $12b2			jmp 	TypeMismatch
.1481					_CLTFloatToInt:
.1481	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>1484	50 72 65 63 69 73 69 6f				.text 	"Precision Lost",0
>148c	6e 20 4c 6f 73 74 00
.1493					_CLTFloatAssignment:
.1493	80 fe		bra $1493			bra 	_CLTFloatAssignment
.1495					_CLTStringAssignment:
.1495	80 fe		bra $1495			bra 	_CLTStringAssignment

;******  Return to file: files.asm


;******  Processing file: commands/goto.asm

.1497					Command_GOTO:
.1497	20 65 15	jsr $1565			jsr 	EvaluateExpression 			; get the line number.
.149a	20 9e 14	jsr $149e			jsr 	TransferControlToStack		; branch to there
.149d	60		rts				rts
.149e					TransferControlToStack:
.149e	20 40 16	jsr $1640			jsr 	DeReferenceUnary 			; remove a reference.
.14a1	bd 00 06	lda $0600,x			lda 	xsStatus,x 					; must be an integer.
.14a4	d0 35		bne $14db			bne 	_TCTBadLine
.14a6	bd 20 06	lda $0620,x			lda 	xsIntLow,x 					; copy line # to zTemp1
.14a9	85 02		sta $02				sta 	zTemp1
.14ab	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.14ae	85 03		sta $03				sta 	zTemp1+1
.14b0	a9 7b		lda #$7b			lda 	#(BasicProgram) & $FF
.14b2	85 00		sta $00				sta 	0+(codePtr)
.14b4	a9 1a		lda #$1a			lda 	#(BasicProgram) >> 8
.14b6	85 01		sta $01				sta 	1+(codePtr)
.14b8					_TCTLoop:
.14b8	b2 00		lda ($00)			lda 	(codePtr) 					; didn't find it
.14ba	f0 22		beq $14de			beq 	_TCTUnknown
.14bc	a0 01		ldy #$01			ldy 	#1 		 					; does it match ?
.14be	b1 00		lda ($00),y			lda		(codePtr),y
.14c0	c5 02		cmp $02				cmp 	zTemp1
.14c2	d0 07		bne $14cb			bne 	_TCTGoNext
.14c4	c8		iny				iny
.14c5	b1 00		lda ($00),y			lda		(codePtr),y
.14c7	c5 03		cmp $03				cmp 	zTemp1+1
.14c9	f0 0d		beq $14d8			beq 	_TCTFound
.14cb					_TCTGoNext:
.14cb	18		clc				clc
.14cc	a5 00		lda $00				lda 	codePtr
.14ce	72 00		adc ($00)			adc 	(codePtr)
.14d0	85 00		sta $00				sta 	codePtr
.14d2	90 02		bcc $14d6			bcc 	_NoCarryAdv
.14d4	e6 01		inc $01				inc 	codePtr+1
.14d6					_NoCarryAdv:
.14d6	80 e0		bra $14b8			bra 	_TCTLoop 					; loop round
.14d8					_TCTFound:
.14d8	a0 03		ldy #$03			ldy 	#3 							; from start of the line
.14da	60		rts				rts
.14db					_TCTBadLine:
.14db	4c c3 12	jmp $12c3			jmp 	ParameterError
.14de					_TCTUnknown:
.14de	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>14e1	4c 69 6e 65 20 6e 75 6d				.text 	"Line number",0
>14e9	62 65 72 00

;******  Return to file: files.asm


;******  Processing file: commands/miscellany.asm

.14ed					Command_Assert:
.14ed	a2 00		ldx #$00			ldx 	#0 							; get a single parameter
.14ef	20 67 15	jsr $1567			jsr 	EvaluateExpressionAtX 		; evaluate the term
.14f2	20 40 16	jsr $1640			jsr 	DeReferenceUnary 			; convert term to value if reference.
.14f5	20 7a 16	jsr $167a			jsr 	UnaryNumberTypeCheck 		; check numeric, returns CC if integer.
.14f8	90 03		bcc $14fd			bcc 	_Integer
.14fa	4c a2 12	jmp $12a2			jmp 	SyntaxError
.14fd					_Integer:
.14fd	bd 20 06	lda $0620,x			lda 	xsIntLow,x 					; check it is non-zero
.1500	1d 40 06	ora $0640,x			ora 	xsIntHigh,x
.1503	f0 01		beq $1506			beq 	_CAFail
.1505	60		rts				rts
.1506					_CAFail:
.1506	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>1509	41 73 73 65 72 74 00				.text 	"Assert",0
.1510					Command_Rem:
.1510	b1 00		lda ($00),y			lda 	(codePtr),y
.1512	c9 fb		cmp #$fb			cmp 	#$FB 						; is there a string ?
.1514	d0 06		bne $151c			bne 	_CRExit
.1516	c8		iny				iny 								; then skip over it.
.1517	38		sec				sec
.1518	98		tya				tya
.1519	71 00		adc ($00),y			adc 	(codePtr),y
.151b	a8		tay				tay
.151c					_CRExit:
.151c	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: commands/run.asm

.151d					Command_RUN:
.151d	a9 7b		lda #$7b			lda 	#(BasicProgram) & $FF
.151f	85 00		sta $00				sta 	0+(codePtr)
.1521	a9 1a		lda #$1a			lda 	#(BasicProgram) >> 8
.1523	85 01		sta $01				sta 	1+(codePtr)
.1525					_CRNewLine:
.1525	b2 00		lda ($00)			lda 	(codePtr) 					; check not at the end of the program
.1527	f0 31		beq $155a			beq 	Command_END 				; reached the end of the program
.1529	a0 02		ldy #$02			ldy 	#2 							; first token of program line -1 for the INY
.152b					_CRNextToken:
.152b	c8		iny				iny 								;
.152c					_CRNextCommand:
.152c	b1 00		lda ($00),y			lda 	(codePtr),y 				; look at token.
.152e	10 25		bpl $1555			bpl 	_CRDefaultLet 				; is it a token, if not, try LET.
.1530	c9 82		cmp #$82			cmp 	#TOK_COLON 					; skip colons
.1532	f0 f7		beq $152b			beq 	_CRNextToken
.1534	c9 d7		cmp #$d7			cmp 	#TOK_LAST_TOKEN				; token too high, probably $F8-$FF
.1536	b0 1a		bcs $1552			bcs 	_CRSyntax
.1538	0a		asl a				asl 	a 							; put token x 2 in X, clears bit 7.
.1539	f0 07		beq $1542			beq 	_CRNextLine 				; if this is zero now it was $80, so end of line
.153b	aa		tax				tax
.153c	c8		iny				iny 								; advance over token.
.153d	20 4f 15	jsr $154f			jsr 	_CRCallRoutine 				; call that routine
.1540	80 ea		bra $152c			bra 	_CRNextCommand 				; and carry on.
.1542					_CRNextLine:
.1542	18		clc				clc
.1543	a5 00		lda $00				lda 	codePtr
.1545	72 00		adc ($00)			adc 	(codePtr)
.1547	85 00		sta $00				sta 	codePtr
.1549	90 02		bcc $154d			bcc 	_NoCarryAdv
.154b	e6 01		inc $01				inc 	codePtr+1
.154d					_NoCarryAdv:
.154d	80 d6		bra $1525			bra 	_CRNewLine 					; do new line code.
.154f					_CRCallRoutine:
.154f	7c f4 11	jmp ($11f4,x)			jmp 	(TokenVectors,x)
.1552					_CRSyntax:
.1552	4c a2 12	jmp $12a2			jmp 	SyntaxError
.1555					_CRDefaultLet:
.1555	20 38 14	jsr $1438			jsr 	Command_LET
.1558	80 d2		bra $152c			bra 	_CRNextCommand
.155a					Command_END:
.155a	4c 22 1a	jmp $1a22			jmp 	WarmStart
.155d					Command_STOP:
.155d	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>1560	53 74 6f 70 00					.text 	"Stop",0

;******  Return to file: files.asm


;******  Processing file: expression/evaluate.asm

.1565					EvaluateExpression:
.1565	a2 00		ldx #$00			ldx 	#0 							; reset the evaluation stack pointer in X
.1567					EvaluateExpressionAtX:
.1567	a9 10		lda #$10			lda 	#$10 						; this is the lowest precedence.
.1569					EvaluateExpressionAtXPrecA:
.1569	48		pha				pha 								; save lowest stack level.
.156a	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the first term.
.156c	30 4f		bmi $15bd			bmi 	_EXAKeywordData 			; is it keyword, or data.
.156e	c9 60		cmp #$60			cmp 	#$60 						; is it a variable
.1570	90 46		bcc $15b8			bcc 	_EXAVariable
.1572	c8		iny				iny 								; skip over the short constant
.1573	29 1f		and #$1f			and 	#$1F 						; short constant $00-$1F
.1575	9d 20 06	sta $0620,x			sta 	xsIntLow,x 					; and put as an integer
.1578	9e 40 06	stz $0640,x			stz 	xsIntHigh,x
.157b	9e 00 06	stz $0600,x			stz 	xsStatus,x 					; integer, number, not a reference.
.157e					_EXAHaveTerm:
.157e	68		pla				pla 	 							; restore current precedence and save in zTemp1
.157f	85 02		sta $02				sta 	zTemp1
.1581	b1 00		lda ($00),y			lda 	(codePtr),y 				; is it followed by a binary operation.
.1583	da		phx				phx
.1584	aa		tax				tax
.1585	bd 1d 11	lda $111d,x			lda 	TokenControlByteTable-$80,x ; get the control byte.
.1588	fa		plx				plx
.1589	c9 20		cmp #$20			cmp 	#$20 						; must be $10-$17 (or possibly $00, will be < precedence)
.158b	b0 06		bcs $1593			bcs 	_EXAExit
.158d	c5 02		cmp $02				cmp 	zTemp1 						; check against current precedence.
.158f	f0 02		beq $1593			beq 	_EXAExit
.1591	b0 01		bcs $1594			bcs		_EXABinaryOp 				; if >, do a binary operation.
.1593					_EXAExit:
.1593	60		rts				rts 								; exit expression evaluation.
.1594					_EXABinaryOp:
.1594	85 03		sta $03				sta 	zTemp1+1 					; save operator.
.1596	a5 02		lda $02				lda 	zTemp1 						; get and save current precedence
.1598	48		pha				pha
.1599	b1 00		lda ($00),y			lda 	(codePtr),y 				; push binary operator on stack
.159b	48		pha				pha
.159c	c8		iny				iny 								; and skip over it.
.159d	e8		inx				inx 								; calculate the RHS in the next slot up.
.159e	a5 03		lda $03				lda 	zTemp1+1 					; at operator precedence level.
.15a0	20 69 15	jsr $1569			jsr 	EvaluateExpressionAtXPrecA
.15a3	ca		dex				dex
.15a4	68		pla				pla 								; get binary operator.
.15a5	da		phx				phx 								; save stack depth.
.15a6	0a		asl a				asl 	a 							; double binary operator and put into X, loses MSB
.15a7	aa		tax				tax
.15a8	bd f4 11	lda $11f4,x			lda 	TokenVectors,x 				; get address => zTemp2
.15ab	85 04		sta $04				sta 	zTemp2
.15ad	bd f5 11	lda $11f5,x			lda 	TokenVectors+1,x
.15b0	85 05		sta $05				sta 	zTemp2+1
.15b2	fa		plx				plx 								; restore stack depth.
.15b3	20 32 16	jsr $1632			jsr 	_EXACallZTemp2 				; call the routine
.15b6	80 c6		bra $157e			bra 	_EXAHaveTerm 				; and loop round again.
.15b8					_EXAVariable:
.15b8	20 d2 19	jsr $19d2			jsr 	VariableLookup 				; look up the variable value perhaps creating it.
.15bb	80 c1		bra $157e			bra 	_EXAHaveTerm 				; and carry on with the expression
.15bd					_EXAKeywordData:
.15bd	c9 90		cmp #$90			cmp 	#TOK_MINUS 					; special case as - is unary and binary operator.
.15bf	d0 09		bne $15ca			bne 	_EXANotNegate
.15c1	c8		iny				iny
.15c2	20 35 16	jsr $1635			jsr 	EvaluateTermAtX 			; the term
.15c5	20 29 18	jsr $1829			jsr 	IntegerNegate 				; negate it
.15c8	80 b4		bra $157e			bra 	_EXAHaveTerm 				; and loop back.
.15ca					_EXANotNegate:
.15ca	c9 f8		cmp #$f8			cmp 	#$F8 						; $80-$F8 are unary functions
.15cc	90 45		bcc $1613			bcc 	_EXAUnaryFunction
.15ce	c9 fb		cmp #$fb			cmp 	#$FB 						; $FB is a string.
.15d0	f0 25		beq $15f7			beq 	_EXAString
.15d2	9e 00 06	stz $0600,x			stz 	xsStatus,x 					; it is now either $FE (short int) or $FF (long int)
.15d5	9e 40 06	stz $0640,x			stz 	xsIntHigh,x
.15d8	48		pha				pha 								; save identifier
.15d9	c8		iny				iny 								; do the low byte
.15da	b1 00		lda ($00),y			lda 	(codePtr),y
.15dc	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.15df	c8		iny				iny
.15e0	68		pla				pla 								; get identifier
.15e1	c9 fe		cmp #$fe			cmp 	#$FE  						; if short then done.
.15e3	f0 99		beq $157e			beq 	_EXAHaveTerm
.15e5	c9 ff		cmp #$ff			cmp 	#$FF 						; should be $FF
.15e7	d0 08		bne $15f1			bne 	_EXACrash
.15e9	b1 00		lda ($00),y			lda 	(codePtr),y 				; copy high byte
.15eb	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.15ee	c8		iny				iny
.15ef	80 8d		bra $157e			bra 	_EXAHaveTerm
.15f1					_EXACrash:
.15f1	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>15f4	23 58 00					.text 	"#X",0
.15f7					_EXAString:
.15f7	c8		iny				iny 								; point to string length, which is the string start.
.15f8	98		tya				tya 								; work out the physical address of the string
.15f9	18		clc				clc
.15fa	65 00		adc $00				adc 	codePtr
.15fc	9d 20 06	sta $0620,x			sta 	xsAddrLow,x
.15ff	a5 01		lda $01				lda 	codePtr+1
.1601	69 00		adc #$00			adc 	#0
.1603	9d 40 06	sta $0640,x			sta 	xsAddrHigh,x
.1606	a9 40		lda #$40			lda 	#$40 						; set the type to string
.1608	9d 00 06	sta $0600,x			sta 	xsStatus,x
.160b	98		tya				tya 								; add the length to the current position
.160c	38		sec				sec 								; +1 for the length byte itself.
.160d	71 00		adc ($00),y			adc 	(codePtr),y
.160f	a8		tay				tay
.1610	4c 7e 15	jmp $157e			jmp 	_EXAHaveTerm
.1613					_EXAUnaryFunction:
.1613	da		phx				phx 								; get the table entry to check it is a unary function
.1614	aa		tax				tax
.1615	3c 1d 11	bit $111d,x			bit 	TokenControlByteTable-$80,x ; if bit 6 is not set, it's not a unary function.
.1618	50 15		bvc $162f			bvc 	_EXANotUnaryFunction
.161a	8a		txa				txa 								; now copy the routine address, put token x 2 in.
.161b	0a		asl a				asl 	a
.161c	aa		tax				tax
.161d	bd f4 11	lda $11f4,x			lda 	TokenVectors,x 				; get address => zTemp2
.1620	85 04		sta $04				sta 	zTemp2
.1622	bd f5 11	lda $11f5,x			lda 	TokenVectors+1,x
.1625	85 05		sta $05				sta 	zTemp2+1
.1627	fa		plx				plx 								; restore stack depth.
.1628	c8		iny				iny 								; skip unary function token.
.1629	20 32 16	jsr $1632			jsr 	_EXACallZTemp2 				; call the routine
.162c	4c 7e 15	jmp $157e			jmp 	_EXAHaveTerm 				; and loop round again.
.162f					_EXANotUnaryFunction:
.162f	4c a2 12	jmp $12a2			jmp 	SyntaxError
.1632					_EXACallZTemp2:
.1632	6c 04 00	jmp ($0004)			jmp 	(zTemp2)

;******  Return to file: files.asm


;******  Processing file: expression/exprutils.asm

.1635					EvaluateTermAtX:
.1635	a9 1f		lda #$1f			lda 	#$1F 						; too high precedence so just term
.1637	20 69 15	jsr $1569			jsr 	EvaluateExpressionAtXPrecA
.163a	60		rts				rts
.163b					DeReferenceBinary:
.163b	e8		inx				inx
.163c	20 40 16	jsr $1640			jsr 	DeReferenceUnary
.163f	ca		dex				dex
.1640					DeReferenceUnary:
.1640	bd 00 06	lda $0600,x			lda 	xsStatus,x 					; the reference flag is in bit 0
.1643	6a		ror a				ror 	a 							; shift into carry.
.1644	90 33		bcc $1679			bcc 	_DRNotReference 			; if clear, it's already a reference.
.1646	0a		asl a				asl 	a 							; get back, but with bit 0 cleared
.1647	9d 00 06	sta $0600,x			sta 	xsStatus,x
.164a	bd 20 06	lda $0620,x			lda 	xsAddrLow,x 				; put the address to dereference into zTemp1
.164d	85 02		sta $02				sta 	zTemp1
.164f	bd 40 06	lda $0640,x			lda 	xsAddrHigh,x
.1652	85 03		sta $03				sta 	zTemp1+1
.1654	5a		phy				phy 								; save position in code
.1655	b2 02		lda ($02)			lda 	(zTemp1) 					; dereference the first two bytes - this will be
.1657	9d 20 06	sta $0620,x			sta 	xsIntLow,x 					; for float, int and string, and will go in these
.165a	a0 01		ldy #$01			ldy 	#1 							; which are also the address, and mantissa3 & 2
.165c	b1 02		lda ($02),y			lda 	(zTemp1),y
.165e	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.1661	bd 00 06	lda $0600,x			lda 	xsStatus,x 					; check if it's a float (bit 7)
.1664	10 12		bpl $1678			bpl 	_DRNotFloat 				; if not, we are complete
.1666	c8		iny				iny 								; if float, copy all five bytes of the floating point
.1667	b1 02		lda ($02),y			lda 	(zTemp1),y 					; number into the stack.
.1669	9d 60 06	sta $0660,x			sta 	xsMantissa1,x
.166c	c8		iny				iny
.166d	b1 02		lda ($02),y			lda 	(zTemp1),y
.166f	9d 80 06	sta $0680,x			sta 	xsMantissa0,x
.1672	c8		iny				iny
.1673	b1 02		lda ($02),y			lda 	(zTemp1),y
.1675	9d a0 06	sta $06a0,x			sta 	xsExponent,x
.1678					_DRNotFloat:
.1678	7a		ply				ply 								; restore code position.
.1679					_DRNotReference:
.1679	60		rts				rts
.167a					UnaryNumberTypeCheck:
.167a	bd 00 06	lda $0600,x			lda 	xsStatus,x
.167d	80 06		bra $1685			bra 	BNTCMain
.167f					BinaryNumberTypeCheck:
.167f	bd 00 06	lda $0600,x			lda 	xsStatus,x 					; bit 7 set if either float, bit 6 set if either string.
.1682	1d 01 06	ora $0601,x			ora 	xsStatus+1,x
.1685					BNTCMain:
.1685	0a		asl a				asl 	a 							; carry set if either float, bit 7 set if either string
.1686	30 01		bmi $1689			bmi 	_NTCError 					; so fail if string, we want int
.1688	60		rts				rts
.1689					_NTCError:
.1689	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>168c	4e 75 6d 62 65 72 20 65				.text 	"Number expected",0
>1694	78 70 65 63 74 65 64 00
.169c					BinaryStringTypeCheck:
.169c	3c 01 06	bit $0601,x			bit 	xsStatus+1,x
.169f	50 06		bvc $16a7			bvc 	STCError
.16a1					UnaryStringTypeCheck:
.16a1	3c 00 06	bit $0600,x			bit 	xsStatus,x 					; check if string
.16a4	50 01		bvc $16a7			bvc 	STCError
.16a6	60		rts				rts
.16a7					STCError:
.16a7	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>16aa	53 74 72 69 6e 67 20 65				.text 	"String expected",0
>16b2	78 70 65 63 74 65 64 00

;******  Return to file: files.asm


;******  Processing file: expression/integer/arithmetic.asm

.16ba					BinaryAdd:
.16ba	20 3b 16	jsr $163b			jsr 	DeReferenceBinary 			; convert references to values
.16bd	3c 00 06	bit $0600,x			bit 	xsStatus,x 					; is this a string ?
.16c0	50 06		bvc $16c8			bvc 	_NumericType
.16c2	20 9c 16	jsr $169c			jsr 	BinaryStringTypeCheck 		; check both are strings
.16c5	4c a2 12	jmp $12a2			jmp 	SyntaxError 							; and do the string handler
.16c8					_NumericType:
.16c8	20 7f 16	jsr $167f			jsr 	BinaryNumberTypeCheck 		; see if they are compatible.
.16cb	90 03		bcc $16d0			bcc 	_Integer
.16cd	4c f9 19	jmp $19f9			jmp 	FPAdd
.16d0					_Integer:
.16d0	18		clc				clc
.16d1	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.16d4	7d 21 06	adc $0621,x			adc 	xsIntLow+1,x
.16d7	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.16da	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.16dd	7d 41 06	adc $0641,x			adc 	xsIntHigh+1,x
.16e0	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.16e3	60		rts				rts
.16e4					BinarySub:
.16e4	20 3b 16	jsr $163b			jsr 	DeReferenceBinary 			; convert references to values
.16e7	20 7f 16	jsr $167f			jsr 	BinaryNumberTypeCheck 		; check numeric, returns CC if both integer.
.16ea	90 03		bcc $16ef			bcc 	_Integer
.16ec	4c f9 19	jmp $19f9			jmp 	FPSub
.16ef					_Integer:
.16ef	38		sec				sec
.16f0	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.16f3	fd 21 06	sbc $0621,x			sbc 	xsIntLow+1,x
.16f6	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.16f9	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.16fc	fd 41 06	sbc $0641,x			sbc 	xsIntHigh+1,x
.16ff	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.1702	60		rts				rts
.1703					BinaryAnd:
.1703	20 3b 16	jsr $163b			jsr 	DeReferenceBinary 			; convert references to values
.1706	20 7f 16	jsr $167f			jsr 	BinaryNumberTypeCheck 		; check numeric. if float convert to integer
.1709	90 03		bcc $170e			bcc 	_Integer
.170b	20 f9 19	jsr $19f9			jsr 	FPFloatToInteger
.170e					_Integer:
.170e	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.1711	3d 21 06	and $0621,x			and 	xsIntLow+1,x
.1714	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.1717	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.171a	3d 41 06	and $0641,x			and 	xsIntHigh+1,x
.171d	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.1720	60		rts				rts
.1721					BinaryOr:
.1721	20 3b 16	jsr $163b			jsr 	DeReferenceBinary 			; convert references to values
.1724	20 7f 16	jsr $167f			jsr 	BinaryNumberTypeCheck 		; check numeric. if float convert to integer
.1727	90 03		bcc $172c			bcc 	_Integer
.1729	20 f9 19	jsr $19f9			jsr 	FPFloatToInteger
.172c					_Integer:
.172c	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.172f	1d 21 06	ora $0621,x			ora 	xsIntLow+1,x
.1732	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.1735	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.1738	1d 41 06	ora $0641,x			ora 	xsIntHigh+1,x
.173b	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.173e	60		rts				rts
.173f					BinaryXor:
.173f	20 3b 16	jsr $163b			jsr 	DeReferenceBinary 			; convert references to values
.1742	20 7f 16	jsr $167f			jsr 	BinaryNumberTypeCheck 		; check numeric. if float convert to integer
.1745	90 03		bcc $174a			bcc 	_Integer
.1747	20 f9 19	jsr $19f9			jsr 	FPFloatToInteger
.174a					_Integer:
.174a	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.174d	5d 21 06	eor $0621,x			eor 	xsIntLow+1,x
.1750	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.1753	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.1756	5d 41 06	eor $0641,x			eor 	xsIntHigh+1,x
.1759	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.175c	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: expression/integer/multiply.asm

.175d					Multiply16x16:
.175d	20 3b 16	jsr $163b			jsr 	DeReferenceBinary 			; convert references to values
.1760	20 7f 16	jsr $167f			jsr 	BinaryNumberTypeCheck 		; check numeric, returns CC if both integer.
.1763	90 03		bcc $1768			bcc 	_Integer
.1765	4c f9 19	jmp $19f9			jmp 	FPMultiply
.1768					_Integer:
.1768	bd 20 06	lda $0620,x			lda 	xsIntLow,x 					; 1st value to zTemp1
.176b	85 04		sta $04				sta 	zTemp2
.176d	bd 40 06	lda $0640,x			lda		xsIntHigh,x
.1770	85 05		sta $05				sta 	zTemp2+1
.1772	9e 20 06	stz $0620,x			stz 	xsIntLow,x 					; zero 1st on stack
.1775	9e 40 06	stz $0640,x			stz 	xsIntHigh,x
.1778					_MultLoop:
.1778	46 05		lsr $05				lsr 	zTemp2+1 					; ror zTemp2 into C
.177a	66 04		ror $04				ror 	zTemp2
.177c	90 13		bcc $1791			bcc 	_MultNoAdd
.177e	18		clc				clc 								; add 2nd to 1st.
.177f	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.1782	7d 21 06	adc $0621,x			adc 	xsIntLow+1,x
.1785	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.1788	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.178b	7d 41 06	adc $0641,x			adc 	xsIntHigh+1,x
.178e	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.1791					_MultNoAdd:
.1791	1e 21 06	asl $0621,x			asl 	xsIntLow+1,x 				; shift 2nd left
.1794	3e 41 06	rol $0641,x			rol 	xsIntHigh+1,x
.1797	a5 04		lda $04				lda 	zTemp2	 					; until multiplier is zero
.1799	05 05		ora $05				ora 	zTemp2+1
.179b	d0 db		bne $1778			bne 	_MultLoop
.179d	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: expression/integer/divide.asm

.179e					Divide16x16:
.179e	20 3b 16	jsr $163b			jsr 	DeReferenceBinary 			; convert references to values
.17a1	20 7f 16	jsr $167f			jsr 	BinaryNumberTypeCheck 		; check numeric, returns CC if both integer.
.17a4	90 03		bcc $17a9			bcc 	_Integer
.17a6	4c f9 19	jmp $19f9			jmp 	FPDivide
.17a9					_Integer:
.17a9	20 ca 17	jsr $17ca			jsr 	IntegerDivide
.17ac	60		rts				rts
.17ad					Modulus16x16:
.17ad	20 3b 16	jsr $163b			jsr 	DeReferenceBinary 			; convert references to values
.17b0	20 7f 16	jsr $167f			jsr 	BinaryNumberTypeCheck 		; check numeric, returns CC if both integer.
.17b3	90 03		bcc $17b8			bcc 	_Integer
.17b5	4c f9 19	jmp $19f9			jmp 	FPModulus
.17b8					_Integer:
.17b8	20 ca 17	jsr $17ca			jsr 	IntegerDivide
.17bb	a5 02		lda $02				lda 	zTemp1
.17bd	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.17c0	a5 03		lda $03				lda 	zTemp1+1
.17c2	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.17c5	60		rts				rts
.17c6					UnsignedIntegerDivide:
.17c6	64 0a		stz $0a				stz 	SignCount 					; Count of signs.
.17c8	80 1e		bra $17e8			bra 	DivideMain
.17ca					IntegerDivide:
.17ca	bd 21 06	lda $0621,x			lda 	xsIntLow+1,x 				; check for division by zero.
.17cd	1d 41 06	ora $0641,x			ora 	xsIntHigh+1,x
.17d0	d0 14		bne $17e6			bne 	_BFDOkay
.17d2	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>17d5	44 69 76 69 73 69 6f 6e				.text 	"Division by Zero",0
>17dd	20 62 79 20 5a 65 72 6f 00
.17e6					_BFDOkay:
.17e6	64 0a		stz $0a				stz 	SignCount 					; Count of signs.
.17e8					DivideMain:
.17e8	64 02		stz $02				stz 	zTemp1 						; Q/Dividend/Left in +0
.17ea	64 03		stz $03				stz 	zTemp1+1 					; M/Divisor/Right in +1
.17ec	5a		phy				phy 								; Y is the counter, save position
.17ed	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.17ef					_BFDLoop:
.17ef	1e 20 06	asl $0620,x			asl 	xsIntLow,x 					; shift AQ left.
.17f2	3e 40 06	rol $0640,x			rol 	xsIntHigh,x
.17f5	26 02		rol $02				rol 	zTemp1
.17f7	26 03		rol $03				rol 	zTemp1+1
.17f9	38		sec				sec
.17fa	a5 02		lda $02				lda 	zTemp1+0 					; Calculate A-M on stack.
.17fc	fd 21 06	sbc $0621,x			sbc 	xsIntLow+1,x
.17ff	48		pha				pha
.1800	a5 03		lda $03				lda 	zTemp1+1
.1802	fd 41 06	sbc $0641,x			sbc 	xsIntHigh+1,x
.1805	90 0f		bcc $1816			bcc 	_BFDNoAdd
.1807	85 03		sta $03				sta 	zTemp1+1
.1809	68		pla				pla
.180a	85 02		sta $02				sta 	zTemp1+0
.180c	bd 20 06	lda $0620,x			lda 	xsIntLow,x 					; set Q bit 1.
.180f	09 01		ora #$01			ora 	#1
.1811	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.1814	80 01		bra $1817			bra 	_BFDNext
.1816					_BFDNoAdd:
.1816	68		pla				pla 								; Throw away the intermediate calculations
.1817					_BFDNext:
.1817	88		dey				dey
.1818	d0 d5		bne $17ef			bne 	_BFDLoop
.181a	7a		ply				ply 								; restore Y
.181b	46 0a		lsr $0a				lsr 	SignCount 					; if sign count odd,
.181d	90 03		bcc $1822			bcc 	_BFDUnsigned 				; then the result is signed
.181f	20 29 18	jsr $1829			jsr		IntegerNegate 				; negate the result
.1822					_BFDUnsigned:
.1822	60		rts				rts
.1823					CheckIntegerNegate:
.1823	bd 40 06	lda $0640,x			lda 	xsIntHigh,x 				; is it -ve = MSB set ?
.1826	30 01		bmi $1829			bmi 	IntegerNegate 				; if so negate it
.1828	60		rts				rts
.1829					IntegerNegate:
.1829	e6 0a		inc $0a				inc 	SignCount 					; bump the count of signs
.182b	38		sec				sec 								; negate
.182c	a9 00		lda #$00			lda 	#0
.182e	fd 20 06	sbc $0620,x			sbc 	xsIntLow,x
.1831	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.1834	a9 00		lda #$00			lda 	#0
.1836	fd 40 06	sbc $0640,x			sbc 	xsIntHigh,x
.1839	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.183c	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: expression/integer/icompare.asm

.183d					Compare_Equals:
.183d	18		clc				clc
.183e	80 01		bra $1841			bra 	CEMain
.1840					Compare_NotEquals:
.1840	38		sec				sec
.1841					CEMain:
.1841	08		php				php 								; carry set flips the result
.1842	20 6b 18	jsr $186b			jsr 	EqualityComparison
.1845					CEWriteResult:
.1845	28		plp				plp  								; get the flip flag
.1846	90 02		bcc $184a			bcc 	_CENoFlip
.1848	49 ff		eor #$ff			eor 	#$FF 						; if so invert the result
.184a					_CENoFlip:
.184a	9d 20 06	sta $0620,x			sta 	xsIntLow,x 					; write it out
.184d	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.1850	9e 00 06	stz $0600,x			stz 	xsStatus,x 					; its an integer
.1853	60		rts				rts
.1854					Compare_GreaterEquals:
.1854	18		clc				clc
.1855	80 01		bra $1858			bra 	GEMain
.1857					Compare_Less:
.1857	38		sec				sec
.1858					GEMain:
.1858	08		php				php 								; carry set flips the result
.1859	20 97 18	jsr $1897			jsr 	MagnitudeComparison
.185c	80 e7		bra $1845			bra 	CEWriteResult
.185e					Compare_LessEquals:
.185e	18		clc				clc
.185f	80 01		bra $1862			bra 	LEMain
.1861					Compare_Greater:
.1861	38		sec				sec
.1862					LEMain:
.1862	08		php				php 								; carry set flips the result
.1863	20 c5 18	jsr $18c5			jsr 	SwapStackTop 				; swap the top two over. Not that efficient, probably doesn't matter
.1866	20 97 18	jsr $1897			jsr 	MagnitudeComparison 		; so the comparison is backwards.
.1869	80 da		bra $1845			bra 	CEWriteResult
.186b					EqualityComparison:
.186b	20 3b 16	jsr $163b			jsr 	DeReferenceBinary 			; convert references to values
.186e	3c 00 06	bit $0600,x			bit 	xsStatus,x 					; is this a string ?
.1871	50 06		bvc $1879			bvc 	_NumericType
.1873	20 9c 16	jsr $169c			jsr 	BinaryStringTypeCheck 		; check both are strings
.1876	4c a2 12	jmp $12a2			jmp 	SyntaxError 							; and do the string handler
.1879					_NumericType:
.1879	20 7f 16	jsr $167f			jsr 	BinaryNumberTypeCheck 		; see if they are compatible.
.187c	90 03		bcc $1881			bcc 	_Integer
.187e	4c f9 19	jmp $19f9			jmp 	FPEquality
.1881					_Integer:
.1881	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.1884	dd 21 06	cmp $0621,x			cmp 	xsIntLow+1,x
.1887	d0 0b		bne $1894			bne 	_NECFail
.1889	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.188c	dd 41 06	cmp $0641,x			cmp 	xsIntHigh+1,x
.188f	d0 03		bne $1894			bne 	_NECFail
.1891	a9 ff		lda #$ff			lda 	#$FF
.1893	60		rts				rts
.1894					_NECFail:
.1894	a9 00		lda #$00			lda 	#$00
.1896	60		rts				rts
.1897					MagnitudeComparison:
.1897	20 3b 16	jsr $163b			jsr 	DeReferenceBinary 			; convert references to values
.189a	3c 00 06	bit $0600,x			bit 	xsStatus,x 					; is this a string ?
.189d	50 06		bvc $18a5			bvc 	_NumericType
.189f	20 9c 16	jsr $169c			jsr 	BinaryStringTypeCheck 		; check both are strings
.18a2	4c a2 12	jmp $12a2			jmp 	SyntaxError 							; and do the string handler
.18a5					_NumericType:
.18a5	20 7f 16	jsr $167f			jsr 	BinaryNumberTypeCheck 		; see if they are compatible.
.18a8	90 03		bcc $18ad			bcc 	_Integer
.18aa	4c f9 19	jmp $19f9			jmp 	FPMagnitude
.18ad					_Integer:
.18ad	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.18b0	dd 21 06	cmp $0621,x			cmp 	xsIntLow+1,x
.18b3	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.18b6	fd 41 06	sbc $0641,x			sbc 	xsIntHigh+1,x
.18b9	50 02		bvc $18bd			bvc 	_MCNoOverflow
.18bb	49 80		eor #$80			eor 	#$80
.18bd					_MCNoOverflow:
.18bd	30 03		bmi $18c2			bmi 	_NECFail
.18bf	a9 ff		lda #$ff			lda 	#$FF
.18c1	60		rts				rts
.18c2					_NECFail:
.18c2	a9 00		lda #$00			lda 	#$00
.18c4	60		rts				rts
.18c5					SwapStackTop:
.18c5	da		phx				phx
.18c6	5a		phy				phy
.18c7	a0 06		ldy #$06			ldy 	#6 							; swap count
.18c9					_SSTLoop:
.18c9	bd 00 06	lda $0600,x			lda 	xsStatus,x 					; the first stack entry, flip it over.
.18cc	48		pha				pha
.18cd	bd 01 06	lda $0601,x			lda 	xsStatus+1,x
.18d0	9d 00 06	sta $0600,x			sta 	xsStatus,x
.18d3	68		pla				pla
.18d4	9d 01 06	sta $0601,x			sta 	xsStatus+1,x
.18d7	8a		txa				txa 								; go forward to the next stack chunk.
.18d8	18		clc				clc
.18d9	69 20		adc #$20			adc 	#stackSize
.18db	aa		tax				tax
.18dc	88		dey				dey 								; do it for the whole of this stack
.18dd	d0 ea		bne $18c9			bne 	_SSTLoop
.18df	7a		ply				ply
.18e0	fa		plx				plx
.18e1	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: expression/integer/tostring.asm

.18e2					PrintYA:
.18e2	a2 00		ldx #$00			ldx 	#0 							; put on stack.
.18e4	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.18e7	98		tya				tya
.18e8	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.18eb	9e 00 06	stz $0600,x			stz 	xsStatus,x 					; tell system it is an integer.
.18ee	a9 0a		lda #$0a			lda 	#10 						; base
.18f0	20 f7 18	jsr $18f7			jsr 	ConvertIntegerUnsigned 		; unsigned integer conversion.
.18f3	20 f8 13	jsr $13f8			jsr 	EXPrintString 				; print the result
.18f6	60		rts				rts
.18f7					ConvertIntegerUnsigned:
.18f7	da		phx				phx
.18f8	48		pha				pha 								; save base on stack
.18f9	64 0b		stz $0b				stz 	convertPtr 					; reset conversion position
.18fb	80 11		bra $190e			bra 	CIMain
.18fd					ConvertIntegerSigned:
.18fd	da		phx				phx
.18fe	48		pha				pha 								; save base on stack.
.18ff	64 0b		stz $0b				stz 	convertPtr 					; reset conversion position
.1901	bd 40 06	lda $0640,x			lda 	xsIntHigh,x 				; is it -ve ?
.1904	10 08		bpl $190e			bpl 	CIMain
.1906	20 29 18	jsr $1829			jsr 	IntegerNegate 				; make it positive
.1909	a9 2d		lda #$2d			lda 	#"-" 						; write a - sign out.
.190b	20 47 19	jsr $1947			jsr 	CIWriteCharacter
.190e					CIMain:
.190e	7a		ply				ply									; get base back
.190f	a9 ff		lda #$ff			lda 	#$FF 						; push marker on stack.
.1911	48		pha				pha
.1912	5a		phy				phy  								; push base back.
.1913					_CILoop:
.1913	68		pla				pla 								; get and save base.
.1914	48		pha				pha
.1915	9d 21 06	sta $0621,x			sta 	xsIntLow+1,x 				; put it in the next stack level and set type
.1918	9e 41 06	stz $0641,x			stz 	xsIntHigh+1,x
.191b	9e 00 06	stz $0600,x			stz 	xsStatus,x
.191e	20 c6 17	jsr $17c6			jsr 	UnsignedIntegerDivide 		; divide.
.1921	7a		ply				ply 								; get base into Y
.1922	a5 02		lda $02				lda 	zTemp1 						; push the remainder on the stack.
.1924	48		pha				pha
.1925	5a		phy				phy 								; push the base back.
.1926	bd 20 06	lda $0620,x			lda 	xsIntLow,x 					; complete
.1929	1d 40 06	ora $0640,x			ora 	xsIntHigh,x
.192c	d0 e5		bne $1913			bne 	_CILoop
.192e	68		pla				pla 								; throw the base
.192f					_CIUnpack:
.192f	68		pla				pla 								; pull off stack so in the right order
.1930	30 0f		bmi $1941			bmi 	_CIExit
.1932	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.1934	90 03		bcc $1939			bcc 	_CINotAlpha
.1936	18		clc				clc
.1937	69 07		adc #$07			adc 	#7
.1939					_CINotAlpha:
.1939	18		clc				clc
.193a	69 30		adc #$30			adc 	#48
.193c	20 47 19	jsr $1947			jsr 	CIWriteCharacter 			; keep going till reach the marker
.193f	80 ee		bra $192f			bra 	_CIUnpack
.1941					_CIExit:
.1941	fa		plx				plx
.1942	a9 00		lda #$00			lda 	#textBuffer & $FF 			; return with pointer in YA
.1944	a0 08		ldy #$08			ldy 	#textBuffer >> 8
.1946	60		rts				rts
.1947					CIWriteCharacter:
.1947	da		phx				phx
.1948	a6 0b		ldx $0b				ldx		convertPtr
.194a	9d 00 08	sta $0800,x			sta 	textBuffer,x
.194d	9e 01 08	stz $0801,x			stz 	textBuffer+1,x
.1950	fa		plx				plx
.1951	e6 0b		inc $0b				inc 	convertPtr
.1953	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: expression/integer/unary.asm

.1954					Dummy_Binary:
.1954					Dummy_Hex:
.1954	20 35 16	jsr $1635			jsr 	EvaluateTermAtX
.1957	60		rts				rts
.1958					Parenthesis:
.1958	20 67 15	jsr $1567			jsr 	EvaluateExpressionAtX 		; parenthesised expression
.195b	20 1a 14	jsr $141a			jsr 	SyntaxCheckRightBracket 	; check followed by )
.195e	60		rts				rts
.195f					AbsoluteValue:
.195f	20 67 15	jsr $1567			jsr 	EvaluateExpressionAtX 		; evaluate the term
.1962	20 40 16	jsr $1640			jsr 	DeReferenceUnary 			; convert term to value if reference.
.1965	20 7a 16	jsr $167a			jsr 	UnaryNumberTypeCheck 		; check numeric, returns CC if integer.
.1968	90 03		bcc $196d			bcc 	_Integer
.196a	4c 74 19	jmp $1974			jmp 	AVFloat
.196d					_Integer:
.196d	20 23 18	jsr $1823			jsr 	CheckIntegerNegate 			; use absolute value in divide
.1970	20 1a 14	jsr $141a			jsr 	SyntaxCheckRightBracket
.1973	60		rts				rts
.1974					AVFloat:
.1974	20 f9 19	jsr $19f9			jsr 	FPAbs
.1977	20 1a 14	jsr $141a			jsr 	SyntaxCheckRightBracket
.197a	60		rts				rts
.197b					SignValue:
.197b	20 67 15	jsr $1567			jsr 	EvaluateExpressionAtX 		; evaluate the term
.197e	20 40 16	jsr $1640			jsr 	DeReferenceUnary 			; convert term to value if reference.
.1981	20 7a 16	jsr $167a			jsr 	UnaryNumberTypeCheck 		; check numeric, returns CC if integer.
.1984	90 03		bcc $1989			bcc 	_Integer
.1986	4c a9 19	jmp $19a9			jmp 	SVFloat
.1989					_Integer:
.1989	20 1a 14	jsr $141a			jsr 	SyntaxCheckRightBracket
.198c	bd 40 06	lda $0640,x			lda 	xsIntHigh,x 				; Check zero
.198f	1d 20 06	ora $0620,x			ora 	xsIntLow,x
.1992	f0 05		beq $1999			beq 	_SVSetLH
.1994	0a		asl a				asl 	a 							; msb into carry
.1995	90 09		bcc $19a0			bcc 	_SVGreater0 				; if CC then it's positive and non zero
.1997	a9 ff		lda #$ff			lda 	#$FF 						; -ve so return -1
.1999					_SVSetLH:
.1999	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.199c	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.199f	60		rts				rts
.19a0					_SVGreater0:
.19a0	a9 01		lda #$01			lda 	#1
.19a2	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.19a5	9e 40 06	stz $0640,x			stz 	xsIntHigh,x
.19a8	60		rts				rts
.19a9					SVFloat:
.19a9	20 f9 19	jsr $19f9			jsr 	FPSgn
.19ac	20 1a 14	jsr $141a			jsr 	SyntaxCheckRightBracket
.19af	60		rts				rts
.19b0					StringLength:
.19b0	20 67 15	jsr $1567			jsr 	EvaluateExpressionAtX 		; evaluate the term
.19b3	20 40 16	jsr $1640			jsr 	DeReferenceUnary 			; convert term to value if reference.
.19b6	20 a1 16	jsr $16a1			jsr 	UnaryStringTypeCheck 		; check string.
.19b9	20 1a 14	jsr $141a			jsr 	SyntaxCheckRightBracket
.19bc	bd 20 06	lda $0620,x			lda 	xsAddrLow,x 				; put address of string into zTemp1
.19bf	85 02		sta $02				sta 	zTemp1
.19c1	bd 40 06	lda $0640,x			lda 	xsAddrHigh,x
.19c4	85 03		sta $03				sta 	zTemp1+1
.19c6	b2 02		lda ($02)			lda 	(zTemp1)					; get the length (strings are len prefixed)
.19c8	9d 20 06	sta $0620,x			sta 	xsIntLow,x 					; and return it
.19cb	9e 40 06	stz $0640,x			stz 	xsIntHigh,x
.19ce	9e 00 06	stz $0600,x			stz 	xsStatus,x
.19d1	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: variables/variable.asm

.19d2					VariableLookup:
.19d2	c9 1a		cmp #$1a			cmp 	#26 						; multi character variables.
.19d4	b0 13		bcs $19e9			bcs 	_VLError
.19d6	0a		asl a				asl 	a 							; multiply by 5, do not move for float
.19d7	0a		asl a				asl 	a
.19d8	71 00		adc ($00),y			adc 	(codePtr),y
.19da	c8		iny				iny 								; skip over variable token
.19db	9d 20 06	sta $0620,x			sta 	xsAddrLow,x
.19de	a9 07		lda #$07			lda 	#variables >> 8
.19e0	9d 40 06	sta $0640,x			sta 	xsAddrHigh,x
.19e3	a9 01		lda #$01			lda 	#$01 						; integer reference.
.19e5	9d 00 06	sta $0600,x			sta 	xsStatus,x
.19e8	60		rts				rts
.19e9					_VLError:
.19e9	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>19ec	42 61 64 20 56 61 72 69				.text 	"Bad Variable",0
>19f4	61 62 6c 65 00

;******  Return to file: files.asm


;******  Processing file: expression/float/floatdummy.asm

.19f9					FPAdd:
.19f9					FPSub:
.19f9					FPMultiply:
.19f9					FPDivide:
.19f9					FPModulus:
.19f9					FPAbs:
.19f9					FPSgn:
.19f9					FPFloatToInteger:
.19f9					FPIntegerToFloat:
.19f9					FPEquality:
.19f9					FPMagnitude:
.19f9	20 d0 12	jsr $12d0			jsr 	ErrorHandler
>19fc	46 6c 6f 61 74 20 4e 6f				.text 	"Float Not Implemented",0
>1a04	74 20 49 6d 70 6c 65 6d 65 6e 74 65 64 00

;******  Return to file: files.asm


;******  Return to file: basic.asm

.1a12					ColdStart:
.1a12	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack
.1a14	9a		txs				txs
.1a15	20 05 13	jsr $1305			jsr 	ExternInitialise
.1a18	a9 25		lda #$25			lda 	#BootMessage & $FF
.1a1a	a0 1a		ldy #$1a			ldy 	#BootMessage >> 8
.1a1c	20 f8 13	jsr $13f8			jsr 	EXPrintString
.1a1f	4c 1d 15	jmp $151d			jmp 	Command_Run
.1a22					WarmStart:
.1a22	4c ff ff	jmp $ffff			jmp 	$FFFF
.1a25					BootMessage:
>1a25	2a 2a 2a 2a 20 43 6f 6d				.text 	"**** Commander X16 Basic ****",13,13
>1a2d	6d 61 6e 64 65 72 20 58 31 36 20 42 61 73 69 63
>1a3d	20 2a 2a 2a 2a 0d 0d
>1a44	35 31 32 4b 20 48 69 67				.text 	"512K High RAM.",13,13
>1a4c	68 20 52 41 4d 2e 0d 0d
>1a54	41 6c 70 68 61 20 31 2e				.text 	"Alpha 1. "
>1a5c	20

;******  Processing file: generated/buildinfo.inc

>1a5d	42 75 69 6c 64 3a 31 35			.text	"Build:150 (08-Feb-20 16:07)"
>1a65	30 20 28 30 38 2d 46 65 62 2d 32 30 20 31 36 3a
>1a75	30 37 29

;******  Return to file: basic.asm

>1a78	0d 0d 00					.byte 	13,13,0
.1a7b					BasicProgram:

;******  End of listing
