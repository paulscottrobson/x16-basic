
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -o basic_nocode.prg -L basic.lst -l basic.lbl basic.asm
; Sat Feb 08 18:20:53 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: code/data.asm

.0000					codePtr:
>0000							.word 	?
.0002					zTemp1:
>0002							.word 	?
.0004					zTemp2:
>0004							.word 	?
.0006					zTemp3:
>0006							.word 	?
.0008					zTemp4:
>0008							.word 	?
.000a					signCount:
>000a							.byte 	?
.000b					convertPtr:
>000b							.byte 	?
.000c					randomSeed:
>000c							.word 	?
=$600					xsStatus = $600								; expression stack (must all fit in one page)
=$20					stackSize = $20 							; stack elements allowed (max 256/6)
=1568					xsAddrLow = xsStatus+stackSize 				; these values are shared depending on type.
=1600					xsAddrHigh = xsStatus+stackSize*2
=1568					xsIntLow = xsAddrLow
=1600					xsIntHigh = xsAddrHigh
=1568					xsMantissa3 = xsAddrLow
=1600					xsMantissa2 = xsAddrHigh
=1632					xsMantissa1 = xsStatus+stackSize*3
=1664					xsMantissa0 = xsStatus+stackSize*4
=1696					xsExponent = xsStatus+stackSize*5
=$700					variables = $700							; 26 variables A-Z. Must be on a page boundary.
=$800					textBuffer = $800							; text buffer for input command lines.
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8

;******  Return to file: basic.asm


;******  Processing file: code/macros.asm


;******  Return to file: basic.asm

.1000	4c e6 1a	jmp $1ae6			jmp 	ColdStart

;******  Processing file: files.asm

.1003					TokenTextTable:

;******  Processing file: generated/tokentext.inc

>1003	05 28 45 4f 4c a9			.byte	$05,$28,$45,$4f,$4c,$a9                  ; $80 : (eol)
>1009	01 a9					.byte	$01,$a9                                  ; $81 : )
>100b	01 ba					.byte	$01,$ba                                  ; $82 : :
>100d	01 ac					.byte	$01,$ac                                  ; $83 : ,
>100f	01 bb					.byte	$01,$bb                                  ; $84 : ;
>1011	01 a3					.byte	$01,$a3                                  ; $85 : #
>1013	03 41 4e c4				.byte	$03,$41,$4e,$c4                          ; $86 : and
>1017	02 4f d2				.byte	$02,$4f,$d2                              ; $87 : or
>101a	03 58 4f d2				.byte	$03,$58,$4f,$d2                          ; $88 : xor
>101e	01 be					.byte	$01,$be                                  ; $89 : >
>1020	02 3e bd				.byte	$02,$3e,$bd                              ; $8a : >=
>1023	01 bc					.byte	$01,$bc                                  ; $8b : <
>1025	02 3c bd				.byte	$02,$3c,$bd                              ; $8c : <=
>1028	01 bd					.byte	$01,$bd                                  ; $8d : =
>102a	02 3c be				.byte	$02,$3c,$be                              ; $8e : <>
>102d	01 ab					.byte	$01,$ab                                  ; $8f : +
>102f	01 ad					.byte	$01,$ad                                  ; $90 : -
>1031	01 aa					.byte	$01,$aa                                  ; $91 : *
>1033	01 af					.byte	$01,$af                                  ; $92 : /
>1035	03 4d 4f c4				.byte	$03,$4d,$4f,$c4                          ; $93 : mod
>1039	04 4c 45 4e a8				.byte	$04,$4c,$45,$4e,$a8                      ; $94 : len(
>103e	04 52 4e 44 a8				.byte	$04,$52,$4e,$44,$a8                      ; $95 : rnd(
>1043	04 41 53 43 a8				.byte	$04,$41,$53,$43,$a8                      ; $96 : asc(
>1048	05 43 48 52 24 a8			.byte	$05,$43,$48,$52,$24,$a8                  ; $97 : chr$(
>104e	04 56 41 4c a8				.byte	$04,$56,$41,$4c,$a8                      ; $98 : val(
>1053	05 53 54 52 24 a8			.byte	$05,$53,$54,$52,$24,$a8                  ; $99 : str$(
>1059	04 53 50 43 a8				.byte	$04,$53,$50,$43,$a8                      ; $9a : spc(
>105e	06 4c 45 46 54 24 a8			.byte	$06,$4c,$45,$46,$54,$24,$a8              ; $9b : left$(
>1065	05 4d 49 44 24 a8			.byte	$05,$4d,$49,$44,$24,$a8                  ; $9c : mid$(
>106b	07 52 49 47 48 54 24 a8			.byte	$07,$52,$49,$47,$48,$54,$24,$a8          ; $9d : right$(
>1073	04 41 42 53 a8				.byte	$04,$41,$42,$53,$a8                      ; $9e : abs(
>1078	04 53 47 4e a8				.byte	$04,$53,$47,$4e,$a8                      ; $9f : sgn(
>107d	04 49 4e 54 a8				.byte	$04,$49,$4e,$54,$a8                      ; $a0 : int(
>1082	07 52 41 4e 44 4f 4d a8			.byte	$07,$52,$41,$4e,$44,$4f,$4d,$a8          ; $a1 : random(
>108a	05 44 45 45 4b a8			.byte	$05,$44,$45,$45,$4b,$a8                  ; $a2 : deek(
>1090	05 50 45 45 4b a8			.byte	$05,$50,$45,$45,$4b,$a8                  ; $a3 : peek(
>1096	06 56 50 45 45 4b a8			.byte	$06,$56,$50,$45,$45,$4b,$a8              ; $a4 : vpeek(
>109d	01 a8					.byte	$01,$a8                                  ; $a5 : (
>109f	01 a5					.byte	$01,$a5                                  ; $a6 : %
>10a1	01 a4					.byte	$01,$a4                                  ; $a7 : $
>10a3	02 49 c6				.byte	$02,$49,$c6                              ; $a8 : if
>10a6	06 52 45 50 45 41 d4			.byte	$06,$52,$45,$50,$45,$41,$d4              ; $a9 : repeat
>10ad	03 46 4f d2				.byte	$03,$46,$4f,$d2                          ; $aa : for
>10b1	05 57 48 49 4c c5			.byte	$05,$57,$48,$49,$4c,$c5                  ; $ab : while
>10b7	04 43 41 53 c5				.byte	$04,$43,$41,$53,$c5                      ; $ac : case
>10bc	04 54 48 45 ce				.byte	$04,$54,$48,$45,$ce                      ; $ad : then
>10c1	05 45 4e 44 49 c6			.byte	$05,$45,$4e,$44,$49,$c6                  ; $ae : endif
>10c7	05 55 4e 54 49 cc			.byte	$05,$55,$4e,$54,$49,$cc                  ; $af : until
>10cd	04 4e 45 58 d4				.byte	$04,$4e,$45,$58,$d4                      ; $b0 : next
>10d2	08 45 4e 44 57 48 49 4c			.byte	$08,$45,$4e,$44,$57,$48,$49,$4c,$c5      ; $b1 : endwhile
>10da	c5
>10db	07 45 4e 44 43 41 53 c5			.byte	$07,$45,$4e,$44,$43,$41,$53,$c5          ; $b2 : endcase
>10e3	02 54 cf				.byte	$02,$54,$cf                              ; $b3 : to
>10e6	04 53 54 45 d0				.byte	$04,$53,$54,$45,$d0                      ; $b4 : step
>10eb	04 50 52 4f c3				.byte	$04,$50,$52,$4f,$c3                      ; $b5 : proc
>10f0	07 45 4e 44 50 52 4f c3			.byte	$07,$45,$4e,$44,$50,$52,$4f,$c3          ; $b6 : endproc
>10f8	04 43 41 4c cc				.byte	$04,$43,$41,$4c,$cc                      ; $b7 : call
>10fd	05 4c 4f 43 41 cc			.byte	$05,$4c,$4f,$43,$41,$cc                  ; $b8 : local
>1103	03 52 55 ce				.byte	$03,$52,$55,$ce                          ; $b9 : run
>1107	04 53 54 4f d0				.byte	$04,$53,$54,$4f,$d0                      ; $ba : stop
>110c	03 45 4e c4				.byte	$03,$45,$4e,$c4                          ; $bb : end
>1110	05 50 52 49 4e d4			.byte	$05,$50,$52,$49,$4e,$d4                  ; $bc : print
>1116	05 49 4e 50 55 d4			.byte	$05,$49,$4e,$50,$55,$d4                  ; $bd : input
>111c	04 57 48 45 ce				.byte	$04,$57,$48,$45,$ce                      ; $be : when
>1121	07 44 45 46 41 55 4c d4			.byte	$07,$44,$45,$46,$41,$55,$4c,$d4          ; $bf : default
>1129	03 4c 45 d4				.byte	$03,$4c,$45,$d4                          ; $c0 : let
>112d	06 4f 50 54 49 4f ce			.byte	$06,$4f,$50,$54,$49,$4f,$ce              ; $c1 : option
>1134	04 4c 49 53 d4				.byte	$04,$4c,$49,$53,$d4                      ; $c2 : list
>1139	04 4c 4f 41 c4				.byte	$04,$4c,$4f,$41,$c4                      ; $c3 : load
>113e	04 53 41 56 c5				.byte	$04,$53,$41,$56,$c5                      ; $c4 : save
>1143	03 4e 45 d7				.byte	$03,$4e,$45,$d7                          ; $c5 : new
>1147	03 4f 4c c4				.byte	$03,$4f,$4c,$c4                          ; $c6 : old
>114b	04 50 4f 4b c5				.byte	$04,$50,$4f,$4b,$c5                      ; $c7 : poke
>1150	04 44 4f 4b c5				.byte	$04,$44,$4f,$4b,$c5                      ; $c8 : doke
>1155	05 56 50 4f 4b c5			.byte	$05,$56,$50,$4f,$4b,$c5                  ; $c9 : vpoke
>115b	03 52 45 cd				.byte	$03,$52,$45,$cd                          ; $ca : rem
>115f	04 47 4f 54 cf				.byte	$04,$47,$4f,$54,$cf                      ; $cb : goto
>1164	05 47 4f 53 55 c2			.byte	$05,$47,$4f,$53,$55,$c2                  ; $cc : gosub
>116a	03 53 59 d3				.byte	$03,$53,$59,$d3                          ; $cd : sys
>116e	06 52 45 54 55 52 ce			.byte	$06,$52,$45,$54,$55,$52,$ce              ; $ce : return
>1175	06 41 53 53 45 52 d4			.byte	$06,$41,$53,$53,$45,$52,$d4              ; $cf : assert
>117c	02 4f ce				.byte	$02,$4f,$ce                              ; $d0 : on
>117f	04 4f 50 45 ce				.byte	$04,$4f,$50,$45,$ce                      ; $d1 : open
>1184	05 43 4c 4f 53 c5			.byte	$05,$43,$4c,$4f,$53,$c5                  ; $d2 : close
>118a	03 44 49 d2				.byte	$03,$44,$49,$d2                          ; $d3 : dir
>118e	03 44 49 cd				.byte	$03,$44,$49,$cd                          ; $d4 : dim
>1192	04 52 45 41 c4				.byte	$04,$52,$45,$41,$c4                      ; $d5 : read
>1197	04 44 41 54 c1				.byte	$04,$44,$41,$54,$c1                      ; $d6 : data
>119c	07 52 45 53 54 4f 52 c5			.byte	$07,$52,$45,$53,$54,$4f,$52,$c5          ; $d7 : restore
>11a4	00					.byte	$00

;******  Return to file: files.asm

.11a5					TokenControlByteTable:

;******  Processing file: generated/tokencbyte.inc

>11a5	00					.byte	$00		; $80 : (eol)
>11a6	00					.byte	$00		; $81 : )
>11a7	00					.byte	$00		; $82 : :
>11a8	00					.byte	$00		; $83 : ,
>11a9	00					.byte	$00		; $84 : ;
>11aa	00					.byte	$00		; $85 : #
>11ab	11					.byte	$11		; $86 : and
>11ac	11					.byte	$11		; $87 : or
>11ad	11					.byte	$11		; $88 : xor
>11ae	12					.byte	$12		; $89 : >
>11af	12					.byte	$12		; $8a : >=
>11b0	12					.byte	$12		; $8b : <
>11b1	12					.byte	$12		; $8c : <=
>11b2	12					.byte	$12		; $8d : =
>11b3	12					.byte	$12		; $8e : <>
>11b4	13					.byte	$13		; $8f : +
>11b5	13					.byte	$13		; $90 : -
>11b6	14					.byte	$14		; $91 : *
>11b7	14					.byte	$14		; $92 : /
>11b8	14					.byte	$14		; $93 : mod
>11b9	40					.byte	$40		; $94 : len(
>11ba	40					.byte	$40		; $95 : rnd(
>11bb	40					.byte	$40		; $96 : asc(
>11bc	40					.byte	$40		; $97 : chr$(
>11bd	40					.byte	$40		; $98 : val(
>11be	40					.byte	$40		; $99 : str$(
>11bf	40					.byte	$40		; $9a : spc(
>11c0	40					.byte	$40		; $9b : left$(
>11c1	40					.byte	$40		; $9c : mid$(
>11c2	40					.byte	$40		; $9d : right$(
>11c3	40					.byte	$40		; $9e : abs(
>11c4	40					.byte	$40		; $9f : sgn(
>11c5	40					.byte	$40		; $a0 : int(
>11c6	40					.byte	$40		; $a1 : random(
>11c7	40					.byte	$40		; $a2 : deek(
>11c8	40					.byte	$40		; $a3 : peek(
>11c9	40					.byte	$40		; $a4 : vpeek(
>11ca	40					.byte	$40		; $a5 : (
>11cb	40					.byte	$40		; $a6 : %
>11cc	40					.byte	$40		; $a7 : $
>11cd	82					.byte	$82		; $a8 : if
>11ce	82					.byte	$82		; $a9 : repeat
>11cf	82					.byte	$82		; $aa : for
>11d0	82					.byte	$82		; $ab : while
>11d1	82					.byte	$82		; $ac : case
>11d2	80					.byte	$80		; $ad : then
>11d3	80					.byte	$80		; $ae : endif
>11d4	80					.byte	$80		; $af : until
>11d5	80					.byte	$80		; $b0 : next
>11d6	80					.byte	$80		; $b1 : endwhile
>11d7	80					.byte	$80		; $b2 : endcase
>11d8	81					.byte	$81		; $b3 : to
>11d9	81					.byte	$81		; $b4 : step
>11da	81					.byte	$81		; $b5 : proc
>11db	81					.byte	$81		; $b6 : endproc
>11dc	81					.byte	$81		; $b7 : call
>11dd	81					.byte	$81		; $b8 : local
>11de	81					.byte	$81		; $b9 : run
>11df	81					.byte	$81		; $ba : stop
>11e0	81					.byte	$81		; $bb : end
>11e1	81					.byte	$81		; $bc : print
>11e2	81					.byte	$81		; $bd : input
>11e3	81					.byte	$81		; $be : when
>11e4	81					.byte	$81		; $bf : default
>11e5	81					.byte	$81		; $c0 : let
>11e6	81					.byte	$81		; $c1 : option
>11e7	81					.byte	$81		; $c2 : list
>11e8	81					.byte	$81		; $c3 : load
>11e9	81					.byte	$81		; $c4 : save
>11ea	81					.byte	$81		; $c5 : new
>11eb	81					.byte	$81		; $c6 : old
>11ec	81					.byte	$81		; $c7 : poke
>11ed	81					.byte	$81		; $c8 : doke
>11ee	81					.byte	$81		; $c9 : vpoke
>11ef	81					.byte	$81		; $ca : rem
>11f0	81					.byte	$81		; $cb : goto
>11f1	81					.byte	$81		; $cc : gosub
>11f2	81					.byte	$81		; $cd : sys
>11f3	81					.byte	$81		; $ce : return
>11f4	81					.byte	$81		; $cf : assert
>11f5	81					.byte	$81		; $d0 : on
>11f6	81					.byte	$81		; $d1 : open
>11f7	81					.byte	$81		; $d2 : close
>11f8	81					.byte	$81		; $d3 : dir
>11f9	81					.byte	$81		; $d4 : dim
>11fa	81					.byte	$81		; $d5 : read
>11fb	81					.byte	$81		; $d6 : data
>11fc	81					.byte	$81		; $d7 : restore

;******  Return to file: files.asm

>11fd							.align 	2 				; defense against old 6502 bug may be present.
.11fe					TokenVectors:

;******  Processing file: generated/tokenvectors.inc

>11fe	ae 12					.word	SyntaxError             		; $80 : (eol)
>1200	ae 12					.word	SyntaxError             		; $81 : )
>1202	ae 12					.word	SyntaxError             		; $82 : :
>1204	ae 12					.word	SyntaxError             		; $83 : ,
>1206	ae 12					.word	SyntaxError             		; $84 : ;
>1208	ae 12					.word	SyntaxError             		; $85 : #
>120a	70 17					.word	BinaryAnd               		; $86 : and
>120c	8e 17					.word	BinaryOr                		; $87 : or
>120e	ac 17					.word	BinaryXor               		; $88 : xor
>1210	ce 18					.word	Compare_Greater         		; $89 : >
>1212	c1 18					.word	Compare_GreaterEquals   		; $8a : >=
>1214	c4 18					.word	Compare_Less            		; $8b : <
>1216	cb 18					.word	Compare_LessEquals      		; $8c : <=
>1218	aa 18					.word	Compare_Equals          		; $8d : =
>121a	ad 18					.word	Compare_NotEquals       		; $8e : <>
>121c	27 17					.word	BinaryAdd               		; $8f : +
>121e	51 17					.word	BinarySub               		; $90 : -
>1220	ca 17					.word	Multiply16x16           		; $91 : *
>1222	0b 18					.word	Divide16x16             		; $92 : /
>1224	1a 18					.word	Modulus16x16            		; $93 : mod
>1226	4c 1a					.word	StringLength            		; $94 : len(
>1228	ae 12					.word	SyntaxError             		; $95 : rnd(
>122a	ae 12					.word	SyntaxError             		; $96 : asc(
>122c	ae 12					.word	SyntaxError             		; $97 : chr$(
>122e	ae 12					.word	SyntaxError             		; $98 : val(
>1230	ae 12					.word	SyntaxError             		; $99 : str$(
>1232	ae 12					.word	SyntaxError             		; $9a : spc(
>1234	ae 12					.word	SyntaxError             		; $9b : left$(
>1236	ae 12					.word	SyntaxError             		; $9c : mid$(
>1238	ae 12					.word	SyntaxError             		; $9d : right$(
>123a	fb 19					.word	AbsoluteValue           		; $9e : abs(
>123c	17 1a					.word	SignValue               		; $9f : sgn(
>123e	ae 12					.word	SyntaxError             		; $a0 : int(
>1240	4f 19					.word	RandomNumber            		; $a1 : random(
>1242	71 1a					.word	DeekMemory              		; $a2 : deek(
>1244	6e 1a					.word	PeekMemory              		; $a3 : peek(
>1246	ae 12					.word	SyntaxError             		; $a4 : vpeek(
>1248	f4 19					.word	Parenthesis             		; $a5 : (
>124a	f0 19					.word	Dummy_Binary            		; $a6 : %
>124c	f0 19					.word	Dummy_Hex               		; $a7 : $
>124e	ae 12					.word	SyntaxError             		; $a8 : if
>1250	ae 12					.word	SyntaxError             		; $a9 : repeat
>1252	ae 12					.word	SyntaxError             		; $aa : for
>1254	ae 12					.word	SyntaxError             		; $ab : while
>1256	ae 12					.word	SyntaxError             		; $ac : case
>1258	ae 12					.word	SyntaxError             		; $ad : then
>125a	ae 12					.word	SyntaxError             		; $ae : endif
>125c	ae 12					.word	SyntaxError             		; $af : until
>125e	ae 12					.word	SyntaxError             		; $b0 : next
>1260	ae 12					.word	SyntaxError             		; $b1 : endwhile
>1262	ae 12					.word	SyntaxError             		; $b2 : endcase
>1264	ae 12					.word	SyntaxError             		; $b3 : to
>1266	ae 12					.word	SyntaxError             		; $b4 : step
>1268	ae 12					.word	SyntaxError             		; $b5 : proc
>126a	ae 12					.word	SyntaxError             		; $b6 : endproc
>126c	ae 12					.word	SyntaxError             		; $b7 : call
>126e	ae 12					.word	SyntaxError             		; $b8 : local
>1270	8a 15					.word	Command_RUN             		; $b9 : run
>1272	ca 15					.word	Command_STOP            		; $ba : stop
>1274	c7 15					.word	Command_END             		; $bb : end
>1276	ae 12					.word	SyntaxError             		; $bc : print
>1278	ae 12					.word	SyntaxError             		; $bd : input
>127a	ae 12					.word	SyntaxError             		; $be : when
>127c	ae 12					.word	SyntaxError             		; $bf : default
>127e	ae 12					.word	SyntaxError             		; $c0 : let
>1280	ae 12					.word	SyntaxError             		; $c1 : option
>1282	ae 12					.word	SyntaxError             		; $c2 : list
>1284	ae 12					.word	SyntaxError             		; $c3 : load
>1286	ae 12					.word	SyntaxError             		; $c4 : save
>1288	ae 12					.word	SyntaxError             		; $c5 : new
>128a	ae 12					.word	SyntaxError             		; $c6 : old
>128c	3e 15					.word	Command_Poke            		; $c7 : poke
>128e	41 15					.word	Command_Doke            		; $c8 : doke
>1290	ae 12					.word	SyntaxError             		; $c9 : vpoke
>1292	31 15					.word	Command_Rem             		; $ca : rem
>1294	b8 14					.word	Command_GOTO            		; $cb : goto
>1296	ae 12					.word	SyntaxError             		; $cc : gosub
>1298	ae 12					.word	SyntaxError             		; $cd : sys
>129a	ae 12					.word	SyntaxError             		; $ce : return
>129c	0e 15					.word	Command_Assert          		; $cf : assert
>129e	ae 12					.word	SyntaxError             		; $d0 : on
>12a0	ae 12					.word	SyntaxError             		; $d1 : open
>12a2	ae 12					.word	SyntaxError             		; $d2 : close
>12a4	ae 12					.word	SyntaxError             		; $d3 : dir
>12a6	ae 12					.word	SyntaxError             		; $d4 : dim
>12a8	ae 12					.word	SyntaxError             		; $d5 : read
>12aa	ae 12					.word	SyntaxError             		; $d6 : data
>12ac	ae 12					.word	SyntaxError             		; $d7 : restore

;******  Return to file: files.asm


;******  Processing file: generated/tokenconst.inc

=$d8					TOK_LAST_TOKEN = $d8
=$80					TOK_LPARENEOLRPAREN = $80
=$81					TOK_RPAREN = $81
=$82					TOK_COLON = $82
=$83					TOK_COMMA = $83
=$84					TOK_SEMICOLON = $84
=$85					TOK_HASH = $85
=$86					TOK_AND = $86
=$87					TOK_OR = $87
=$88					TOK_XOR = $88
=$89					TOK_GREATER = $89
=$8a					TOK_GREATEREQUAL = $8a
=$8b					TOK_LESS = $8b
=$8c					TOK_LESSEQUAL = $8c
=$8d					TOK_EQUAL = $8d
=$8e					TOK_LESSGREATER = $8e
=$8f					TOK_PLUS = $8f
=$90					TOK_MINUS = $90
=$91					TOK_STAR = $91
=$92					TOK_SLASH = $92
=$93					TOK_MOD = $93
=$94					TOK_LENLPAREN = $94
=$95					TOK_RNDLPAREN = $95
=$96					TOK_ASCLPAREN = $96
=$97					TOK_CHRDOLLARLPAREN = $97
=$98					TOK_VALLPAREN = $98
=$99					TOK_STRDOLLARLPAREN = $99
=$9a					TOK_SPCLPAREN = $9a
=$9b					TOK_LEFTDOLLARLPAREN = $9b
=$9c					TOK_MIDDOLLARLPAREN = $9c
=$9d					TOK_RIGHTDOLLARLPAREN = $9d
=$9e					TOK_ABSLPAREN = $9e
=$9f					TOK_SGNLPAREN = $9f
=$a0					TOK_INTLPAREN = $a0
=$a1					TOK_RANDOMLPAREN = $a1
=$a2					TOK_DEEKLPAREN = $a2
=$a3					TOK_PEEKLPAREN = $a3
=$a4					TOK_VPEEKLPAREN = $a4
=$a5					TOK_LPAREN = $a5
=$a6					TOK_PERCENT = $a6
=$a7					TOK_DOLLAR = $a7
=$a8					TOK_IF = $a8
=$a9					TOK_REPEAT = $a9
=$aa					TOK_FOR = $aa
=$ab					TOK_WHILE = $ab
=$ac					TOK_CASE = $ac
=$ad					TOK_THEN = $ad
=$ae					TOK_ENDIF = $ae
=$af					TOK_UNTIL = $af
=$b0					TOK_NEXT = $b0
=$b1					TOK_ENDWHILE = $b1
=$b2					TOK_ENDCASE = $b2
=$b3					TOK_TO = $b3
=$b4					TOK_STEP = $b4
=$b5					TOK_PROC = $b5
=$b6					TOK_ENDPROC = $b6
=$b7					TOK_CALL = $b7
=$b8					TOK_LOCAL = $b8
=$b9					TOK_RUN = $b9
=$ba					TOK_STOP = $ba
=$bb					TOK_END = $bb
=$bc					TOK_PRINT = $bc
=$bd					TOK_INPUT = $bd
=$be					TOK_WHEN = $be
=$bf					TOK_DEFAULT = $bf
=$c0					TOK_LET = $c0
=$c1					TOK_OPTION = $c1
=$c2					TOK_LIST = $c2
=$c3					TOK_LOAD = $c3
=$c4					TOK_SAVE = $c4
=$c5					TOK_NEW = $c5
=$c6					TOK_OLD = $c6
=$c7					TOK_POKE = $c7
=$c8					TOK_DOKE = $c8
=$c9					TOK_VPOKE = $c9
=$ca					TOK_REM = $ca
=$cb					TOK_GOTO = $cb
=$cc					TOK_GOSUB = $cc
=$cd					TOK_SYS = $cd
=$ce					TOK_RETURN = $ce
=$cf					TOK_ASSERT = $cf
=$d0					TOK_ON = $d0
=$d1					TOK_OPEN = $d1
=$d2					TOK_CLOSE = $d2
=$d3					TOK_DIR = $d3
=$d4					TOK_DIM = $d4
=$d5					TOK_READ = $d5
=$d6					TOK_DATA = $d6
=$d7					TOK_RESTORE = $d7

;******  Return to file: files.asm


;******  Processing file: code/error.asm

.12ae					SyntaxError:
.12ae	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>12b1	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",0
>12b9	72 72 6f 72 00
.12be					TypeMismatch:
.12be	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>12c1	54 79 70 65 20 4d 69 73				.text 	"Type Mismatch",0
>12c9	6d 61 74 63 68 00
.12cf					ParameterError:
.12cf	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>12d2	50 61 72 61 6d 65 74 65				.text 	"Parameter",0
>12da	72 00
.12dc					ErrorHandler:
.12dc	68		pla				pla 								; get message address
.12dd	7a		ply				ply
.12de	1a		inc a				inc 	a
.12df	d0 01		bne $12e2			bne 	_EHNoCarry
.12e1	c8		iny				iny
.12e2					_EHNoCarry:
.12e2	20 04 14	jsr $1404			jsr 	EXPrintString
.12e5	a0 01		ldy #$01			ldy 	#1 							; check if there is a line #
.12e7	b1 00		lda ($00),y			lda 	(codePtr),y
.12e9	c8		iny				iny
.12ea	11 00		ora ($00),y			ora 	(codePtr),y
.12ec	f0 14		beq $1302			beq 	_EHNoLine
.12ee	a9 0c		lda #$0c			lda 	#_EHMsg2 & $FF 				; print " at "
.12f0	a0 13		ldy #$13			ldy 	#_EHMsg2 >> 8
.12f2	20 04 14	jsr $1404			jsr 	EXPrintString
.12f5	a0 02		ldy #$02			ldy 	#2 							; print line number
.12f7	b1 00		lda ($00),y			lda 	(codePtr),y
.12f9	48		pha				pha
.12fa	88		dey				dey
.12fb	b1 00		lda ($00),y			lda 	(codePtr),y
.12fd	7a		ply				ply
.12fe	18		clc				clc
.12ff	20 7e 19	jsr $197e			jsr 	PrintYA
.1302					_EHNoLine:
.1302	a9 0d		lda #$0d			lda 	#13
.1304	20 3d 13	jsr $133d			jsr 	ExternPrint
.1307	80 fe		bra $1307	_h1:	bra 	_h1
.1309	4c f6 1a	jmp $1af6			jmp 	WarmStart
.130c					_EHMsg2:
>130c	20 61 74 20 00					.text 	" at ",0

;******  Return to file: files.asm


;******  Processing file: code/extern.asm

.1311					ExternInitialise:
.1311	a9 90		lda #$90			lda 	#144 						; set colour
.1313	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1316	a9 01		lda #$01			lda 	#$01
.1318	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.131b	a9 0e		lda #$0e			lda 	#14							; lower case
.131d	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1320	a9 93		lda #$93			lda 	#147 						; clear screen
.1322	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1325	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.1327	4c 49 13	jmp $1349			jmp 	ExternColour
.132a					ExternCheckBreak:
.132a	da		phx				phx 								; make sure we keep XY
.132b	5a		phy				phy
.132c	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.132f	f0 03		beq $1334			beq		_ECBExit 					; stopped
.1331	7a		ply				ply 								; restore and exit.
.1332	fa		plx				plx
.1333	60		rts				rts
.1334					_ECBExit:
.1334	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>1337	42 72 65 61 6b 00				.text 	"Break",0
.133d					ExternPrint:
.133d	48		pha				pha
.133e	da		phx				phx
.133f	5a		phy				phy
.1340	29 7f		and #$7f			and 	#$7F
.1342	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1345	7a		ply				ply
.1346	fa		plx				plx
.1347	68		pla				pla
.1348	60		rts				rts
.1349					ExternColour:
.1349	48		pha				pha
.134a	da		phx				phx
.134b	48		pha				pha
.134c	29 08		and #$08			and 	#8
.134e	0a		asl a				asl 	a
.134f	0a		asl a				asl 	a
.1350	0a		asl a				asl 	a
.1351	0a		asl a				asl 	a
.1352	49 92		eor #$92			eor 	#$92
.1354	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1357	68		pla				pla
.1358	29 07		and #$07			and 	#7
.135a	aa		tax				tax
.135b	bd 64 13	lda $1364,x			lda 	_ECTable,x
.135e	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1361	fa		plx				plx
.1362	68		pla				pla
.1363	60		rts				rts
.1364					_ECTable:
>1364	90						.byte 	144
>1365	1c						.byte 	28
>1366	1e						.byte 	30
>1367	9e						.byte 	158
>1368	1f						.byte 	31
>1369	9c						.byte 	156
>136a	9f						.byte 	159
>136b	05						.byte 	5
.136c					ExternInput:
.136c	a9 00		lda #$00			lda 	#(textBuffer & $FF)
.136e	85 06		sta $06				sta 	zTemp3
.1370	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.1372	85 07		sta $07				sta 	zTemp3+1
.1374	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.1377	c9 0d		cmp #$0d			cmp 	#13
.1379	f0 0c		beq $1387			beq 	_EIExit
.137b	29 7f		and #$7f			and 	#$7F
.137d	92 06		sta ($06)			sta 	(zTemp3)
.137f	e6 06		inc $06				inc 	zTemp3
.1381	d0 f1		bne $1374			bne 	_EIRead
.1383	e6 07		inc $07				inc 	zTemp3+1
.1385	80 ed		bra $1374			bra 	_EIRead
.1387	a9 00		lda #$00	_EIExit:lda 	#0
.1389	92 06		sta ($06)			sta 	(zTemp3)
.138b	a9 0d		lda #$0d			lda 	#13
.138d	20 3d 13	jsr $133d			jsr 	ExternPrint
.1390	60		rts				rts
.1391					ExternSave:
.1391	da		phx				phx
.1392	5a		phy				phy
.1393	85 04		sta $04				sta 	zTemp2 						; save start
.1395	84 05		sty $05				sty 	zTemp2+1
.1397	20 f9 13	jsr $13f9			jsr 	EXGetLength 				; get length of file into A
.139a	a6 06		ldx $06				ldx 	zTemp3
.139c	a4 07		ldy $07				ldy 	zTemp3+1
.139e	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13a1	a9 01		lda #$01			lda 	#1
.13a3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13a5	a0 00		ldy #$00			ldy 	#0
.13a7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13aa	a6 02		ldx $02				ldx 	zTemp1 						; end address
.13ac	a4 03		ldy $03				ldy 	zTemp1+1
.13ae	a9 04		lda #$04			lda 	#zTemp2
.13b0	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13b3	b0 03		bcs $13b8			bcs 	_ESSave
.13b5	7a		ply				ply
.13b6	fa		plx				plx
.13b7	60		rts				rts
.13b8					_ESSave:
.13b8	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>13bb	4c 6f 61 64 20 46 61 69				.text 	"Load Failed",0
>13c3	6c 65 64 00
.13c7					ExternLoad:
.13c7	da		phx				phx 								; save XY
.13c8	5a		phy				phy
.13c9	48		pha				pha 								; save target
.13ca	5a		phy				phy
.13cb	20 f9 13	jsr $13f9			jsr 	EXGetLength 				; get length of file into A
.13ce	a6 06		ldx $06				ldx 	zTemp3
.13d0	a4 07		ldy $07				ldy 	zTemp3+1
.13d2	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d5	a9 01		lda #$01			lda 	#1
.13d7	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d9	a0 00		ldy #$00			ldy 	#0
.13db	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13de	7a		ply				ply 								; restore target to YX and call load
.13df	fa		plx				plx
.13e0	a9 00		lda #$00			lda 	#0 							; load command
.13e2	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.13e5	b0 03		bcs $13ea			bcs 	_ESLoad
.13e7	7a		ply				ply
.13e8	fa		plx				plx
.13e9	60		rts				rts
.13ea					_ESLoad:
.13ea	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>13ed	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>13f5	4c 45 44 00
.13f9					EXGetLength:
.13f9	5a		phy				phy
.13fa	a0 ff		ldy #$ff			ldy 	#255
.13fc	c8		iny		_EXGL0:	iny
.13fd	b1 06		lda ($06),y			lda 	(zTemp3),y
.13ff	d0 fb		bne $13fc			bne 	_EXGL0
.1401	98		tya				tya
.1402	7a		ply				ply
.1403	60		rts				rts
.1404					EXPrintString:
.1404	48		pha				pha
.1405	5a		phy				phy
.1406	84 03		sty $03				sty 	zTemp1+1
.1408	85 02		sta $02				sta 	zTemp1
.140a	a0 00		ldy #$00			ldy 	#0
.140c					_EXPSLoop:
.140c	b1 02		lda ($02),y			lda 	(zTemp1),y
.140e	f0 13		beq $1423			beq 	_EXPSExit
.1410	29 7f		and #$7f			and 	#$7F
.1412	c9 61		cmp #$61			cmp 	#'a'
.1414	90 07		bcc $141d			bcc 	_EXPSNoLC
.1416	c9 7b		cmp #$7b			cmp 	#'z'+1
.1418	b0 03		bcs $141d			bcs 	_EXPSNoLC
.141a	38		sec				sec
.141b	e9 20		sbc #$20			sbc 	#32
.141d					_EXPSNoLC:
.141d	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1420	c8		iny				iny
.1421	80 e9		bra $140c			bra 	_EXPSLoop
.1423					_EXPSExit:
.1423	7a		ply				ply
.1424	68		pla				pla
.1425	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: code/syntax.asm

.1426					SyntaxCheckRightBracket:
.1426	b1 00		lda ($00),y			lda 	(codePtr),y
.1428	c8		iny				iny
.1429	c9 81		cmp #$81			cmp 	#TOK_RPAREN
.142b	d0 01		bne $142e			bne 	_SCRBError
.142d	60		rts				rts
.142e					_SCRBError:
.142e	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>1431	4d 69 73 73 69 6e 67 20				.text 	"Missing )",0
>1439	29 00
.143b					SyntaxCheckComma:
.143b	b1 00		lda ($00),y			lda 	(codePtr),y
.143d	c8		iny				iny
.143e	c9 83		cmp #$83			cmp 	#TOK_COMMA
.1440	d0 01		bne $1443			bne 	_SCRCError
.1442	60		rts				rts
.1443					_SCRCError:
.1443	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>1446	4d 69 73 73 69 6e 67 20				.text 	"Missing ,",0
>144e	2c 00
.1450					SyntaxCheckA:
.1450	d1 00		cmp ($00),y			cmp 	(codePtr),y
.1452	d0 02		bne $1456			bne 	_SCAError
.1454	c8		iny				iny
.1455	60		rts				rts
.1456					_SCAError:
.1456	4c ae 12	jmp $12ae			jmp 	SyntaxError

;******  Return to file: files.asm


;******  Processing file: commands/let.asm

.1459					Command_LET:
.1459	a2 00		ldx #$00			ldx 	#0 							; get the L-Expr
.145b	20 a2 16	jsr $16a2			jsr 	EvaluateTermAtX
.145e	bd 00 06	lda $0600,x			lda 	xsStatus,x 					; check to see if it is a reference.
.1461	6a		ror a				ror 	a
.1462	90 38		bcc $149c			bcc 	_CLTNotVar 					; if not, then we have an error.
.1464	a9 8d		lda #$8d			lda 	#TOK_EQUAL					; next token must be an equals.
.1466	20 50 14	jsr $1450			jsr 	SyntaxCheckA
.1469	e8		inx				inx
.146a	20 d4 15	jsr $15d4			jsr 	EvaluateExpressionAtX 		; calculate the R-Expr in level 1.
.146d	ad 20 06	lda $0620			lda 	xsAddrLow
.1470	85 02		sta $02				sta 	zTemp1
.1472	ad 40 06	lda $0640			lda 	xsAddrHigh
.1475	85 03		sta $03				sta 	zTemp1+1
.1477	ad 00 06	lda $0600			lda 	xsStatus 					; check the same types.
.147a	4d 01 06	eor $0601			eor 	xsStatus+1
.147d	29 40		and #$40			and 	#$40
.147f	d0 1e		bne $149f			bne 	_CLTTypeMismatch
.1481	2c 00 06	bit $0600			bit 	xsStatus 					; string to string assignment
.1484	70 30		bvs $14b6			bvs 	_CLTStringAssignment
.1486	30 2c		bmi $14b4			bmi 	_CLTFloatAssignment
.1488	2c 01 06	bit $0601			bit 	xsStatus+1 					; are we assigning a float to an integer ?
.148b	70 15		bvs $14a2			bvs 	_CLTFloatToInt 				; yes, then we do not auto truncate.
.148d	5a		phy				phy 								; copy value into reference.
.148e	ad 21 06	lda $0621			lda 	xsIntLow+1
.1491	92 02		sta ($02)			sta 	(zTemp1)
.1493	a0 01		ldy #$01			ldy 	#1
.1495	ad 41 06	lda $0641			lda 	xsIntHigh+1
.1498	91 02		sta ($02),y			sta 	(zTemp1),y
.149a	7a		ply				ply
.149b	60		rts				rts
.149c					_CLTNotVar:
.149c	4c ae 12	jmp $12ae			jmp 	SyntaxError
.149f					_CLTTypeMismatch:
.149f	4c be 12	jmp $12be			jmp 	TypeMismatch
.14a2					_CLTFloatToInt:
.14a2	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>14a5	50 72 65 63 69 73 69 6f				.text 	"Precision Lost",0
>14ad	6e 20 4c 6f 73 74 00
.14b4					_CLTFloatAssignment:
.14b4	80 fe		bra $14b4			bra 	_CLTFloatAssignment
.14b6					_CLTStringAssignment:
.14b6	80 fe		bra $14b6			bra 	_CLTStringAssignment

;******  Return to file: files.asm


;******  Processing file: commands/goto.asm

.14b8					Command_GOTO:
.14b8	20 d2 15	jsr $15d2			jsr 	EvaluateExpression 			; get the line number.
.14bb	20 bf 14	jsr $14bf			jsr 	TransferControlToStack		; branch to there
.14be	60		rts				rts
.14bf					TransferControlToStack:
.14bf	20 ad 16	jsr $16ad			jsr 	DeReferenceUnary 			; remove a reference.
.14c2	bd 00 06	lda $0600,x			lda 	xsStatus,x 					; must be an integer.
.14c5	d0 35		bne $14fc			bne 	_TCTBadLine
.14c7	bd 20 06	lda $0620,x			lda 	xsIntLow,x 					; copy line # to zTemp1
.14ca	85 02		sta $02				sta 	zTemp1
.14cc	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.14cf	85 03		sta $03				sta 	zTemp1+1
.14d1	a9 51		lda #$51			lda 	#(BasicProgram) & $FF
.14d3	85 00		sta $00				sta 	0+(codePtr)
.14d5	a9 1b		lda #$1b			lda 	#(BasicProgram) >> 8
.14d7	85 01		sta $01				sta 	1+(codePtr)
.14d9					_TCTLoop:
.14d9	b2 00		lda ($00)			lda 	(codePtr) 					; didn't find it
.14db	f0 22		beq $14ff			beq 	_TCTUnknown
.14dd	a0 01		ldy #$01			ldy 	#1 		 					; does it match ?
.14df	b1 00		lda ($00),y			lda		(codePtr),y
.14e1	c5 02		cmp $02				cmp 	zTemp1
.14e3	d0 07		bne $14ec			bne 	_TCTGoNext
.14e5	c8		iny				iny
.14e6	b1 00		lda ($00),y			lda		(codePtr),y
.14e8	c5 03		cmp $03				cmp 	zTemp1+1
.14ea	f0 0d		beq $14f9			beq 	_TCTFound
.14ec					_TCTGoNext:
.14ec	18		clc				clc
.14ed	a5 00		lda $00				lda 	codePtr
.14ef	72 00		adc ($00)			adc 	(codePtr)
.14f1	85 00		sta $00				sta 	codePtr
.14f3	90 02		bcc $14f7			bcc 	_NoCarryAdv
.14f5	e6 01		inc $01				inc 	codePtr+1
.14f7					_NoCarryAdv:
.14f7	80 e0		bra $14d9			bra 	_TCTLoop 					; loop round
.14f9					_TCTFound:
.14f9	a0 03		ldy #$03			ldy 	#3 							; from start of the line
.14fb	60		rts				rts
.14fc					_TCTBadLine:
.14fc	4c cf 12	jmp $12cf			jmp 	ParameterError
.14ff					_TCTUnknown:
.14ff	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>1502	4c 69 6e 65 20 6e 75 6d				.text 	"Line number",0
>150a	62 65 72 00

;******  Return to file: files.asm


;******  Processing file: commands/miscellany.asm

.150e					Command_Assert:
.150e	a2 00		ldx #$00			ldx 	#0 							; get a single parameter
.1510	20 d4 15	jsr $15d4			jsr 	EvaluateExpressionAtX 		; evaluate the term
.1513	20 ad 16	jsr $16ad			jsr 	DeReferenceUnary 			; convert term to value if reference.
.1516	20 e7 16	jsr $16e7			jsr 	UnaryNumberTypeCheck 		; check numeric, returns CC if integer.
.1519	90 03		bcc $151e			bcc 	_Integer
.151b	4c ae 12	jmp $12ae			jmp 	SyntaxError
.151e					_Integer:
.151e	bd 20 06	lda $0620,x			lda 	xsIntLow,x 					; check it is non-zero
.1521	1d 40 06	ora $0640,x			ora 	xsIntHigh,x
.1524	f0 01		beq $1527			beq 	_CAFail
.1526	60		rts				rts
.1527					_CAFail:
.1527	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>152a	41 73 73 65 72 74 00				.text 	"Assert",0
.1531					Command_Rem:
.1531	b1 00		lda ($00),y			lda 	(codePtr),y
.1533	c9 fb		cmp #$fb			cmp 	#$FB 						; is there a string ?
.1535	d0 06		bne $153d			bne 	_CRExit
.1537	c8		iny				iny 								; then skip over it.
.1538	38		sec				sec
.1539	98		tya				tya
.153a	71 00		adc ($00),y			adc 	(codePtr),y
.153c	a8		tay				tay
.153d					_CRExit:
.153d	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: commands/pokedoke.asm

.153e					Command_Poke:
.153e	18		clc				clc
.153f	80 01		bra $1542			bra 	WriteMemoryMain
.1541					Command_Doke:
.1541	38		sec				sec
.1542					WriteMemoryMain:
.1542	08		php				php									; save cc byte cs word
.1543	a2 00		ldx #$00			ldx 	#0 							; get address and parameter.
.1545	20 d4 15	jsr $15d4			jsr 	EvaluateExpressionAtX 		; evaluate the term
.1548	20 ad 16	jsr $16ad			jsr 	DeReferenceUnary 			; convert term to value if reference.
.154b	20 e7 16	jsr $16e7			jsr 	UnaryNumberTypeCheck 		; check numeric, returns CC if integer.
.154e	90 03		bcc $1553			bcc 	_Integer
.1550	4c be 12	jmp $12be			jmp 	TypeMismatch
.1553					_Integer:
.1553	20 3b 14	jsr $143b			jsr 	SyntaxCheckComma
.1556	e8		inx				inx
.1557	20 d4 15	jsr $15d4			jsr 	EvaluateExpressionAtX 		; evaluate the term
.155a	20 ad 16	jsr $16ad			jsr 	DeReferenceUnary 			; convert term to value if reference.
.155d	20 e7 16	jsr $16e7			jsr 	UnaryNumberTypeCheck 		; check numeric, returns CC if integer.
.1560	90 03		bcc $1565			bcc 	_Integer
.1562	4c be 12	jmp $12be			jmp 	TypeMismatch
.1565					_Integer:
.1565	ad 20 06	lda $0620			lda 	xsAddrLow 					; transfer address
.1568	85 02		sta $02				sta 	zTemp1
.156a	ad 40 06	lda $0640			lda 	xsAddrHigh
.156d	85 03		sta $03				sta 	zTemp1+1
.156f	ad 21 06	lda $0621			lda 	xsIntLow+1 					; do the poke anyway
.1572	92 02		sta ($02)			sta 	(zTemp1)
.1574	28		plp				plp
.1575	b0 09		bcs $1580			bcs 	_WMMWord
.1577	ad 41 06	lda $0641			lda 	xsIntHigh+1 				; get high byte
.157a	d0 01		bne $157d			bne 	_WMMByteReq 				; should be zero
.157c	60		rts				rts
.157d					_WMMByteReq:
.157d	4c cf 12	jmp $12cf			jmp 	ParameterError
.1580					_WMMWord:
.1580	5a		phy				phy
.1581	a0 01		ldy #$01			ldy 	#1
.1583	ad 41 06	lda $0641			lda 	xsIntHigh+1
.1586	91 02		sta ($02),y			sta 	(zTemp1),y
.1588	7a		ply				ply
.1589	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: commands/run.asm

.158a					Command_RUN:
.158a	a9 51		lda #$51			lda 	#(BasicProgram) & $FF
.158c	85 00		sta $00				sta 	0+(codePtr)
.158e	a9 1b		lda #$1b			lda 	#(BasicProgram) >> 8
.1590	85 01		sta $01				sta 	1+(codePtr)
.1592					_CRNewLine:
.1592	b2 00		lda ($00)			lda 	(codePtr) 					; check not at the end of the program
.1594	f0 31		beq $15c7			beq 	Command_END 				; reached the end of the program
.1596	a0 02		ldy #$02			ldy 	#2 							; first token of program line -1 for the INY
.1598					_CRNextToken:
.1598	c8		iny				iny 								;
.1599					_CRNextCommand:
.1599	b1 00		lda ($00),y			lda 	(codePtr),y 				; look at token.
.159b	10 25		bpl $15c2			bpl 	_CRDefaultLet 				; is it a token, if not, try LET.
.159d	c9 82		cmp #$82			cmp 	#TOK_COLON 					; skip colons
.159f	f0 f7		beq $1598			beq 	_CRNextToken
.15a1	c9 d8		cmp #$d8			cmp 	#TOK_LAST_TOKEN				; token too high, probably $F8-$FF
.15a3	b0 1a		bcs $15bf			bcs 	_CRSyntax
.15a5	0a		asl a				asl 	a 							; put token x 2 in X, clears bit 7.
.15a6	f0 07		beq $15af			beq 	_CRNextLine 				; if this is zero now it was $80, so end of line
.15a8	aa		tax				tax
.15a9	c8		iny				iny 								; advance over token.
.15aa	20 bc 15	jsr $15bc			jsr 	_CRCallRoutine 				; call that routine
.15ad	80 ea		bra $1599			bra 	_CRNextCommand 				; and carry on.
.15af					_CRNextLine:
.15af	18		clc				clc
.15b0	a5 00		lda $00				lda 	codePtr
.15b2	72 00		adc ($00)			adc 	(codePtr)
.15b4	85 00		sta $00				sta 	codePtr
.15b6	90 02		bcc $15ba			bcc 	_NoCarryAdv
.15b8	e6 01		inc $01				inc 	codePtr+1
.15ba					_NoCarryAdv:
.15ba	80 d6		bra $1592			bra 	_CRNewLine 					; do new line code.
.15bc					_CRCallRoutine:
.15bc	7c fe 11	jmp ($11fe,x)			jmp 	(TokenVectors,x)
.15bf					_CRSyntax:
.15bf	4c ae 12	jmp $12ae			jmp 	SyntaxError
.15c2					_CRDefaultLet:
.15c2	20 59 14	jsr $1459			jsr 	Command_LET
.15c5	80 d2		bra $1599			bra 	_CRNextCommand
.15c7					Command_END:
.15c7	4c f6 1a	jmp $1af6			jmp 	WarmStart
.15ca					Command_STOP:
.15ca	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>15cd	53 74 6f 70 00					.text 	"Stop",0

;******  Return to file: files.asm


;******  Processing file: expression/evaluate.asm

.15d2					EvaluateExpression:
.15d2	a2 00		ldx #$00			ldx 	#0 							; reset the evaluation stack pointer in X
.15d4					EvaluateExpressionAtX:
.15d4	a9 10		lda #$10			lda 	#$10 						; this is the lowest precedence.
.15d6					EvaluateExpressionAtXPrecA:
.15d6	48		pha				pha 								; save lowest stack level.
.15d7	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the first term.
.15d9	30 4f		bmi $162a			bmi 	_EXAKeywordData 			; is it keyword, or data.
.15db	c9 60		cmp #$60			cmp 	#$60 						; is it a variable
.15dd	90 46		bcc $1625			bcc 	_EXAVariable
.15df	c8		iny				iny 								; skip over the short constant
.15e0	29 1f		and #$1f			and 	#$1F 						; short constant $00-$1F
.15e2	9d 20 06	sta $0620,x			sta 	xsIntLow,x 					; and put as an integer
.15e5	9e 40 06	stz $0640,x			stz 	xsIntHigh,x
.15e8	9e 00 06	stz $0600,x			stz 	xsStatus,x 					; integer, number, not a reference.
.15eb					_EXAHaveTerm:
.15eb	68		pla				pla 	 							; restore current precedence and save in zTemp1
.15ec	85 02		sta $02				sta 	zTemp1
.15ee	b1 00		lda ($00),y			lda 	(codePtr),y 				; is it followed by a binary operation.
.15f0	da		phx				phx
.15f1	aa		tax				tax
.15f2	bd 25 11	lda $1125,x			lda 	TokenControlByteTable-$80,x ; get the control byte.
.15f5	fa		plx				plx
.15f6	c9 20		cmp #$20			cmp 	#$20 						; must be $10-$17 (or possibly $00, will be < precedence)
.15f8	b0 06		bcs $1600			bcs 	_EXAExit
.15fa	c5 02		cmp $02				cmp 	zTemp1 						; check against current precedence.
.15fc	f0 02		beq $1600			beq 	_EXAExit
.15fe	b0 01		bcs $1601			bcs		_EXABinaryOp 				; if >, do a binary operation.
.1600					_EXAExit:
.1600	60		rts				rts 								; exit expression evaluation.
.1601					_EXABinaryOp:
.1601	85 03		sta $03				sta 	zTemp1+1 					; save operator.
.1603	a5 02		lda $02				lda 	zTemp1 						; get and save current precedence
.1605	48		pha				pha
.1606	b1 00		lda ($00),y			lda 	(codePtr),y 				; push binary operator on stack
.1608	48		pha				pha
.1609	c8		iny				iny 								; and skip over it.
.160a	e8		inx				inx 								; calculate the RHS in the next slot up.
.160b	a5 03		lda $03				lda 	zTemp1+1 					; at operator precedence level.
.160d	20 d6 15	jsr $15d6			jsr 	EvaluateExpressionAtXPrecA
.1610	ca		dex				dex
.1611	68		pla				pla 								; get binary operator.
.1612	da		phx				phx 								; save stack depth.
.1613	0a		asl a				asl 	a 							; double binary operator and put into X, loses MSB
.1614	aa		tax				tax
.1615	bd fe 11	lda $11fe,x			lda 	TokenVectors,x 				; get address => zTemp2
.1618	85 04		sta $04				sta 	zTemp2
.161a	bd ff 11	lda $11ff,x			lda 	TokenVectors+1,x
.161d	85 05		sta $05				sta 	zTemp2+1
.161f	fa		plx				plx 								; restore stack depth.
.1620	20 9f 16	jsr $169f			jsr 	_EXACallZTemp2 				; call the routine
.1623	80 c6		bra $15eb			bra 	_EXAHaveTerm 				; and loop round again.
.1625					_EXAVariable:
.1625	20 a6 1a	jsr $1aa6			jsr 	VariableLookup 				; look up the variable value perhaps creating it.
.1628	80 c1		bra $15eb			bra 	_EXAHaveTerm 				; and carry on with the expression
.162a					_EXAKeywordData:
.162a	c9 90		cmp #$90			cmp 	#TOK_MINUS 					; special case as - is unary and binary operator.
.162c	d0 09		bne $1637			bne 	_EXANotNegate
.162e	c8		iny				iny
.162f	20 a2 16	jsr $16a2			jsr 	EvaluateTermAtX 			; the term
.1632	20 96 18	jsr $1896			jsr 	IntegerNegate 				; negate it
.1635	80 b4		bra $15eb			bra 	_EXAHaveTerm 				; and loop back.
.1637					_EXANotNegate:
.1637	c9 f8		cmp #$f8			cmp 	#$F8 						; $80-$F8 are unary functions
.1639	90 45		bcc $1680			bcc 	_EXAUnaryFunction
.163b	c9 fb		cmp #$fb			cmp 	#$FB 						; $FB is a string.
.163d	f0 25		beq $1664			beq 	_EXAString
.163f	9e 00 06	stz $0600,x			stz 	xsStatus,x 					; it is now either $FE (short int) or $FF (long int)
.1642	9e 40 06	stz $0640,x			stz 	xsIntHigh,x
.1645	48		pha				pha 								; save identifier
.1646	c8		iny				iny 								; do the low byte
.1647	b1 00		lda ($00),y			lda 	(codePtr),y
.1649	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.164c	c8		iny				iny
.164d	68		pla				pla 								; get identifier
.164e	c9 fe		cmp #$fe			cmp 	#$FE  						; if short then done.
.1650	f0 99		beq $15eb			beq 	_EXAHaveTerm
.1652	c9 ff		cmp #$ff			cmp 	#$FF 						; should be $FF
.1654	d0 08		bne $165e			bne 	_EXACrash
.1656	b1 00		lda ($00),y			lda 	(codePtr),y 				; copy high byte
.1658	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.165b	c8		iny				iny
.165c	80 8d		bra $15eb			bra 	_EXAHaveTerm
.165e					_EXACrash:
.165e	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>1661	23 58 00					.text 	"#X",0
.1664					_EXAString:
.1664	c8		iny				iny 								; point to string length, which is the string start.
.1665	98		tya				tya 								; work out the physical address of the string
.1666	18		clc				clc
.1667	65 00		adc $00				adc 	codePtr
.1669	9d 20 06	sta $0620,x			sta 	xsAddrLow,x
.166c	a5 01		lda $01				lda 	codePtr+1
.166e	69 00		adc #$00			adc 	#0
.1670	9d 40 06	sta $0640,x			sta 	xsAddrHigh,x
.1673	a9 40		lda #$40			lda 	#$40 						; set the type to string
.1675	9d 00 06	sta $0600,x			sta 	xsStatus,x
.1678	98		tya				tya 								; add the length to the current position
.1679	38		sec				sec 								; +1 for the length byte itself.
.167a	71 00		adc ($00),y			adc 	(codePtr),y
.167c	a8		tay				tay
.167d	4c eb 15	jmp $15eb			jmp 	_EXAHaveTerm
.1680					_EXAUnaryFunction:
.1680	da		phx				phx 								; get the table entry to check it is a unary function
.1681	aa		tax				tax
.1682	3c 25 11	bit $1125,x			bit 	TokenControlByteTable-$80,x ; if bit 6 is not set, it's not a unary function.
.1685	50 15		bvc $169c			bvc 	_EXANotUnaryFunction
.1687	8a		txa				txa 								; now copy the routine address, put token x 2 in.
.1688	0a		asl a				asl 	a
.1689	aa		tax				tax
.168a	bd fe 11	lda $11fe,x			lda 	TokenVectors,x 				; get address => zTemp2
.168d	85 04		sta $04				sta 	zTemp2
.168f	bd ff 11	lda $11ff,x			lda 	TokenVectors+1,x
.1692	85 05		sta $05				sta 	zTemp2+1
.1694	fa		plx				plx 								; restore stack depth.
.1695	c8		iny				iny 								; skip unary function token.
.1696	20 9f 16	jsr $169f			jsr 	_EXACallZTemp2 				; call the routine
.1699	4c eb 15	jmp $15eb			jmp 	_EXAHaveTerm 				; and loop round again.
.169c					_EXANotUnaryFunction:
.169c	4c ae 12	jmp $12ae			jmp 	SyntaxError
.169f					_EXACallZTemp2:
.169f	6c 04 00	jmp ($0004)			jmp 	(zTemp2)

;******  Return to file: files.asm


;******  Processing file: expression/exprutils.asm

.16a2					EvaluateTermAtX:
.16a2	a9 1f		lda #$1f			lda 	#$1F 						; too high precedence so just term
.16a4	20 d6 15	jsr $15d6			jsr 	EvaluateExpressionAtXPrecA
.16a7	60		rts				rts
.16a8					DeReferenceBinary:
.16a8	e8		inx				inx
.16a9	20 ad 16	jsr $16ad			jsr 	DeReferenceUnary
.16ac	ca		dex				dex
.16ad					DeReferenceUnary:
.16ad	bd 00 06	lda $0600,x			lda 	xsStatus,x 					; the reference flag is in bit 0
.16b0	6a		ror a				ror 	a 							; shift into carry.
.16b1	90 33		bcc $16e6			bcc 	_DRNotReference 			; if clear, it's already a reference.
.16b3	0a		asl a				asl 	a 							; get back, but with bit 0 cleared
.16b4	9d 00 06	sta $0600,x			sta 	xsStatus,x
.16b7	bd 20 06	lda $0620,x			lda 	xsAddrLow,x 				; put the address to dereference into zTemp1
.16ba	85 02		sta $02				sta 	zTemp1
.16bc	bd 40 06	lda $0640,x			lda 	xsAddrHigh,x
.16bf	85 03		sta $03				sta 	zTemp1+1
.16c1	5a		phy				phy 								; save position in code
.16c2	b2 02		lda ($02)			lda 	(zTemp1) 					; dereference the first two bytes - this will be
.16c4	9d 20 06	sta $0620,x			sta 	xsIntLow,x 					; for float, int and string, and will go in these
.16c7	a0 01		ldy #$01			ldy 	#1 							; which are also the address, and mantissa3 & 2
.16c9	b1 02		lda ($02),y			lda 	(zTemp1),y
.16cb	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.16ce	bd 00 06	lda $0600,x			lda 	xsStatus,x 					; check if it's a float (bit 7)
.16d1	10 12		bpl $16e5			bpl 	_DRNotFloat 				; if not, we are complete
.16d3	c8		iny				iny 								; if float, copy all five bytes of the floating point
.16d4	b1 02		lda ($02),y			lda 	(zTemp1),y 					; number into the stack.
.16d6	9d 60 06	sta $0660,x			sta 	xsMantissa1,x
.16d9	c8		iny				iny
.16da	b1 02		lda ($02),y			lda 	(zTemp1),y
.16dc	9d 80 06	sta $0680,x			sta 	xsMantissa0,x
.16df	c8		iny				iny
.16e0	b1 02		lda ($02),y			lda 	(zTemp1),y
.16e2	9d a0 06	sta $06a0,x			sta 	xsExponent,x
.16e5					_DRNotFloat:
.16e5	7a		ply				ply 								; restore code position.
.16e6					_DRNotReference:
.16e6	60		rts				rts
.16e7					UnaryNumberTypeCheck:
.16e7	bd 00 06	lda $0600,x			lda 	xsStatus,x
.16ea	80 06		bra $16f2			bra 	BNTCMain
.16ec					BinaryNumberTypeCheck:
.16ec	bd 00 06	lda $0600,x			lda 	xsStatus,x 					; bit 7 set if either float, bit 6 set if either string.
.16ef	1d 01 06	ora $0601,x			ora 	xsStatus+1,x
.16f2					BNTCMain:
.16f2	0a		asl a				asl 	a 							; carry set if either float, bit 7 set if either string
.16f3	30 01		bmi $16f6			bmi 	_NTCError 					; so fail if string, we want int
.16f5	60		rts				rts
.16f6					_NTCError:
.16f6	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>16f9	4e 75 6d 62 65 72 20 65				.text 	"Number expected",0
>1701	78 70 65 63 74 65 64 00
.1709					BinaryStringTypeCheck:
.1709	3c 01 06	bit $0601,x			bit 	xsStatus+1,x
.170c	50 06		bvc $1714			bvc 	STCError
.170e					UnaryStringTypeCheck:
.170e	3c 00 06	bit $0600,x			bit 	xsStatus,x 					; check if string
.1711	50 01		bvc $1714			bvc 	STCError
.1713	60		rts				rts
.1714					STCError:
.1714	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>1717	53 74 72 69 6e 67 20 65				.text 	"String expected",0
>171f	78 70 65 63 74 65 64 00

;******  Return to file: files.asm


;******  Processing file: expression/integer/arithmetic.asm

.1727					BinaryAdd:
.1727	20 a8 16	jsr $16a8			jsr 	DeReferenceBinary 			; convert references to values
.172a	3c 00 06	bit $0600,x			bit 	xsStatus,x 					; is this a string ?
.172d	50 06		bvc $1735			bvc 	_NumericType
.172f	20 09 17	jsr $1709			jsr 	BinaryStringTypeCheck 		; check both are strings
.1732	4c ae 12	jmp $12ae			jmp 	SyntaxError 							; and do the string handler
.1735					_NumericType:
.1735	20 ec 16	jsr $16ec			jsr 	BinaryNumberTypeCheck 		; see if they are compatible.
.1738	90 03		bcc $173d			bcc 	_Integer
.173a	4c cd 1a	jmp $1acd			jmp 	FPAdd
.173d					_Integer:
.173d	18		clc				clc
.173e	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.1741	7d 21 06	adc $0621,x			adc 	xsIntLow+1,x
.1744	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.1747	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.174a	7d 41 06	adc $0641,x			adc 	xsIntHigh+1,x
.174d	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.1750	60		rts				rts
.1751					BinarySub:
.1751	20 a8 16	jsr $16a8			jsr 	DeReferenceBinary 			; convert references to values
.1754	20 ec 16	jsr $16ec			jsr 	BinaryNumberTypeCheck 		; check numeric, returns CC if both integer.
.1757	90 03		bcc $175c			bcc 	_Integer
.1759	4c cd 1a	jmp $1acd			jmp 	FPSub
.175c					_Integer:
.175c	38		sec				sec
.175d	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.1760	fd 21 06	sbc $0621,x			sbc 	xsIntLow+1,x
.1763	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.1766	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.1769	fd 41 06	sbc $0641,x			sbc 	xsIntHigh+1,x
.176c	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.176f	60		rts				rts
.1770					BinaryAnd:
.1770	20 a8 16	jsr $16a8			jsr 	DeReferenceBinary 			; convert references to values
.1773	20 ec 16	jsr $16ec			jsr 	BinaryNumberTypeCheck 		; check numeric. if float convert to integer
.1776	90 03		bcc $177b			bcc 	_Integer
.1778	20 cd 1a	jsr $1acd			jsr 	FPFloatToInteger
.177b					_Integer:
.177b	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.177e	3d 21 06	and $0621,x			and 	xsIntLow+1,x
.1781	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.1784	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.1787	3d 41 06	and $0641,x			and 	xsIntHigh+1,x
.178a	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.178d	60		rts				rts
.178e					BinaryOr:
.178e	20 a8 16	jsr $16a8			jsr 	DeReferenceBinary 			; convert references to values
.1791	20 ec 16	jsr $16ec			jsr 	BinaryNumberTypeCheck 		; check numeric. if float convert to integer
.1794	90 03		bcc $1799			bcc 	_Integer
.1796	20 cd 1a	jsr $1acd			jsr 	FPFloatToInteger
.1799					_Integer:
.1799	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.179c	1d 21 06	ora $0621,x			ora 	xsIntLow+1,x
.179f	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.17a2	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.17a5	1d 41 06	ora $0641,x			ora 	xsIntHigh+1,x
.17a8	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.17ab	60		rts				rts
.17ac					BinaryXor:
.17ac	20 a8 16	jsr $16a8			jsr 	DeReferenceBinary 			; convert references to values
.17af	20 ec 16	jsr $16ec			jsr 	BinaryNumberTypeCheck 		; check numeric. if float convert to integer
.17b2	90 03		bcc $17b7			bcc 	_Integer
.17b4	20 cd 1a	jsr $1acd			jsr 	FPFloatToInteger
.17b7					_Integer:
.17b7	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.17ba	5d 21 06	eor $0621,x			eor 	xsIntLow+1,x
.17bd	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.17c0	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.17c3	5d 41 06	eor $0641,x			eor 	xsIntHigh+1,x
.17c6	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.17c9	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: expression/integer/multiply.asm

.17ca					Multiply16x16:
.17ca	20 a8 16	jsr $16a8			jsr 	DeReferenceBinary 			; convert references to values
.17cd	20 ec 16	jsr $16ec			jsr 	BinaryNumberTypeCheck 		; check numeric, returns CC if both integer.
.17d0	90 03		bcc $17d5			bcc 	_Integer
.17d2	4c cd 1a	jmp $1acd			jmp 	FPMultiply
.17d5					_Integer:
.17d5	bd 20 06	lda $0620,x			lda 	xsIntLow,x 					; 1st value to zTemp1
.17d8	85 04		sta $04				sta 	zTemp2
.17da	bd 40 06	lda $0640,x			lda		xsIntHigh,x
.17dd	85 05		sta $05				sta 	zTemp2+1
.17df	9e 20 06	stz $0620,x			stz 	xsIntLow,x 					; zero 1st on stack
.17e2	9e 40 06	stz $0640,x			stz 	xsIntHigh,x
.17e5					_MultLoop:
.17e5	46 05		lsr $05				lsr 	zTemp2+1 					; ror zTemp2 into C
.17e7	66 04		ror $04				ror 	zTemp2
.17e9	90 13		bcc $17fe			bcc 	_MultNoAdd
.17eb	18		clc				clc 								; add 2nd to 1st.
.17ec	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.17ef	7d 21 06	adc $0621,x			adc 	xsIntLow+1,x
.17f2	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.17f5	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.17f8	7d 41 06	adc $0641,x			adc 	xsIntHigh+1,x
.17fb	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.17fe					_MultNoAdd:
.17fe	1e 21 06	asl $0621,x			asl 	xsIntLow+1,x 				; shift 2nd left
.1801	3e 41 06	rol $0641,x			rol 	xsIntHigh+1,x
.1804	a5 04		lda $04				lda 	zTemp2	 					; until multiplier is zero
.1806	05 05		ora $05				ora 	zTemp2+1
.1808	d0 db		bne $17e5			bne 	_MultLoop
.180a	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: expression/integer/divide.asm

.180b					Divide16x16:
.180b	20 a8 16	jsr $16a8			jsr 	DeReferenceBinary 			; convert references to values
.180e	20 ec 16	jsr $16ec			jsr 	BinaryNumberTypeCheck 		; check numeric, returns CC if both integer.
.1811	90 03		bcc $1816			bcc 	_Integer
.1813	4c cd 1a	jmp $1acd			jmp 	FPDivide
.1816					_Integer:
.1816	20 37 18	jsr $1837			jsr 	IntegerDivide
.1819	60		rts				rts
.181a					Modulus16x16:
.181a	20 a8 16	jsr $16a8			jsr 	DeReferenceBinary 			; convert references to values
.181d	20 ec 16	jsr $16ec			jsr 	BinaryNumberTypeCheck 		; check numeric, returns CC if both integer.
.1820	90 03		bcc $1825			bcc 	_Integer
.1822	4c cd 1a	jmp $1acd			jmp 	FPModulus
.1825					_Integer:
.1825	20 37 18	jsr $1837			jsr 	IntegerDivide
.1828	a5 02		lda $02				lda 	zTemp1
.182a	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.182d	a5 03		lda $03				lda 	zTemp1+1
.182f	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.1832	60		rts				rts
.1833					UnsignedIntegerDivide:
.1833	64 0a		stz $0a				stz 	SignCount 					; Count of signs.
.1835	80 1e		bra $1855			bra 	DivideMain
.1837					IntegerDivide:
.1837	bd 21 06	lda $0621,x			lda 	xsIntLow+1,x 				; check for division by zero.
.183a	1d 41 06	ora $0641,x			ora 	xsIntHigh+1,x
.183d	d0 14		bne $1853			bne 	_BFDOkay
.183f	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>1842	44 69 76 69 73 69 6f 6e				.text 	"Division by Zero",0
>184a	20 62 79 20 5a 65 72 6f 00
.1853					_BFDOkay:
.1853	64 0a		stz $0a				stz 	SignCount 					; Count of signs.
.1855					DivideMain:
.1855	64 02		stz $02				stz 	zTemp1 						; Q/Dividend/Left in +0
.1857	64 03		stz $03				stz 	zTemp1+1 					; M/Divisor/Right in +1
.1859	5a		phy				phy 								; Y is the counter, save position
.185a	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.185c					_BFDLoop:
.185c	1e 20 06	asl $0620,x			asl 	xsIntLow,x 					; shift AQ left.
.185f	3e 40 06	rol $0640,x			rol 	xsIntHigh,x
.1862	26 02		rol $02				rol 	zTemp1
.1864	26 03		rol $03				rol 	zTemp1+1
.1866	38		sec				sec
.1867	a5 02		lda $02				lda 	zTemp1+0 					; Calculate A-M on stack.
.1869	fd 21 06	sbc $0621,x			sbc 	xsIntLow+1,x
.186c	48		pha				pha
.186d	a5 03		lda $03				lda 	zTemp1+1
.186f	fd 41 06	sbc $0641,x			sbc 	xsIntHigh+1,x
.1872	90 0f		bcc $1883			bcc 	_BFDNoAdd
.1874	85 03		sta $03				sta 	zTemp1+1
.1876	68		pla				pla
.1877	85 02		sta $02				sta 	zTemp1+0
.1879	bd 20 06	lda $0620,x			lda 	xsIntLow,x 					; set Q bit 1.
.187c	09 01		ora #$01			ora 	#1
.187e	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.1881	80 01		bra $1884			bra 	_BFDNext
.1883					_BFDNoAdd:
.1883	68		pla				pla 								; Throw away the intermediate calculations
.1884					_BFDNext:
.1884	88		dey				dey
.1885	d0 d5		bne $185c			bne 	_BFDLoop
.1887	7a		ply				ply 								; restore Y
.1888	46 0a		lsr $0a				lsr 	SignCount 					; if sign count odd,
.188a	90 03		bcc $188f			bcc 	_BFDUnsigned 				; then the result is signed
.188c	20 96 18	jsr $1896			jsr		IntegerNegate 				; negate the result
.188f					_BFDUnsigned:
.188f	60		rts				rts
.1890					CheckIntegerNegate:
.1890	bd 40 06	lda $0640,x			lda 	xsIntHigh,x 				; is it -ve = MSB set ?
.1893	30 01		bmi $1896			bmi 	IntegerNegate 				; if so negate it
.1895	60		rts				rts
.1896					IntegerNegate:
.1896	e6 0a		inc $0a				inc 	SignCount 					; bump the count of signs
.1898	38		sec				sec 								; negate
.1899	a9 00		lda #$00			lda 	#0
.189b	fd 20 06	sbc $0620,x			sbc 	xsIntLow,x
.189e	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.18a1	a9 00		lda #$00			lda 	#0
.18a3	fd 40 06	sbc $0640,x			sbc 	xsIntHigh,x
.18a6	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.18a9	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: expression/integer/icompare.asm

.18aa					Compare_Equals:
.18aa	18		clc				clc
.18ab	80 01		bra $18ae			bra 	CEMain
.18ad					Compare_NotEquals:
.18ad	38		sec				sec
.18ae					CEMain:
.18ae	08		php				php 								; carry set flips the result
.18af	20 d8 18	jsr $18d8			jsr 	EqualityComparison
.18b2					CEWriteResult:
.18b2	28		plp				plp  								; get the flip flag
.18b3	90 02		bcc $18b7			bcc 	_CENoFlip
.18b5	49 ff		eor #$ff			eor 	#$FF 						; if so invert the result
.18b7					_CENoFlip:
.18b7	9d 20 06	sta $0620,x			sta 	xsIntLow,x 					; write it out
.18ba	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.18bd	9e 00 06	stz $0600,x			stz 	xsStatus,x 					; its an integer
.18c0	60		rts				rts
.18c1					Compare_GreaterEquals:
.18c1	18		clc				clc
.18c2	80 01		bra $18c5			bra 	GEMain
.18c4					Compare_Less:
.18c4	38		sec				sec
.18c5					GEMain:
.18c5	08		php				php 								; carry set flips the result
.18c6	20 04 19	jsr $1904			jsr 	MagnitudeComparison
.18c9	80 e7		bra $18b2			bra 	CEWriteResult
.18cb					Compare_LessEquals:
.18cb	18		clc				clc
.18cc	80 01		bra $18cf			bra 	LEMain
.18ce					Compare_Greater:
.18ce	38		sec				sec
.18cf					LEMain:
.18cf	08		php				php 								; carry set flips the result
.18d0	20 32 19	jsr $1932			jsr 	SwapStackTop 				; swap the top two over. Not that efficient, probably doesn't matter
.18d3	20 04 19	jsr $1904			jsr 	MagnitudeComparison 		; so the comparison is backwards.
.18d6	80 da		bra $18b2			bra 	CEWriteResult
.18d8					EqualityComparison:
.18d8	20 a8 16	jsr $16a8			jsr 	DeReferenceBinary 			; convert references to values
.18db	3c 00 06	bit $0600,x			bit 	xsStatus,x 					; is this a string ?
.18de	50 06		bvc $18e6			bvc 	_NumericType
.18e0	20 09 17	jsr $1709			jsr 	BinaryStringTypeCheck 		; check both are strings
.18e3	4c ae 12	jmp $12ae			jmp 	SyntaxError 							; and do the string handler
.18e6					_NumericType:
.18e6	20 ec 16	jsr $16ec			jsr 	BinaryNumberTypeCheck 		; see if they are compatible.
.18e9	90 03		bcc $18ee			bcc 	_Integer
.18eb	4c cd 1a	jmp $1acd			jmp 	FPEquality
.18ee					_Integer:
.18ee	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.18f1	dd 21 06	cmp $0621,x			cmp 	xsIntLow+1,x
.18f4	d0 0b		bne $1901			bne 	_NECFail
.18f6	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.18f9	dd 41 06	cmp $0641,x			cmp 	xsIntHigh+1,x
.18fc	d0 03		bne $1901			bne 	_NECFail
.18fe	a9 ff		lda #$ff			lda 	#$FF
.1900	60		rts				rts
.1901					_NECFail:
.1901	a9 00		lda #$00			lda 	#$00
.1903	60		rts				rts
.1904					MagnitudeComparison:
.1904	20 a8 16	jsr $16a8			jsr 	DeReferenceBinary 			; convert references to values
.1907	3c 00 06	bit $0600,x			bit 	xsStatus,x 					; is this a string ?
.190a	50 06		bvc $1912			bvc 	_NumericType
.190c	20 09 17	jsr $1709			jsr 	BinaryStringTypeCheck 		; check both are strings
.190f	4c ae 12	jmp $12ae			jmp 	SyntaxError 							; and do the string handler
.1912					_NumericType:
.1912	20 ec 16	jsr $16ec			jsr 	BinaryNumberTypeCheck 		; see if they are compatible.
.1915	90 03		bcc $191a			bcc 	_Integer
.1917	4c cd 1a	jmp $1acd			jmp 	FPMagnitude
.191a					_Integer:
.191a	bd 20 06	lda $0620,x			lda 	xsIntLow,x
.191d	dd 21 06	cmp $0621,x			cmp 	xsIntLow+1,x
.1920	bd 40 06	lda $0640,x			lda 	xsIntHigh,x
.1923	fd 41 06	sbc $0641,x			sbc 	xsIntHigh+1,x
.1926	50 02		bvc $192a			bvc 	_MCNoOverflow
.1928	49 80		eor #$80			eor 	#$80
.192a					_MCNoOverflow:
.192a	30 03		bmi $192f			bmi 	_NECFail
.192c	a9 ff		lda #$ff			lda 	#$FF
.192e	60		rts				rts
.192f					_NECFail:
.192f	a9 00		lda #$00			lda 	#$00
.1931	60		rts				rts
.1932					SwapStackTop:
.1932	da		phx				phx
.1933	5a		phy				phy
.1934	a0 06		ldy #$06			ldy 	#6 							; swap count
.1936					_SSTLoop:
.1936	bd 00 06	lda $0600,x			lda 	xsStatus,x 					; the first stack entry, flip it over.
.1939	48		pha				pha
.193a	bd 01 06	lda $0601,x			lda 	xsStatus+1,x
.193d	9d 00 06	sta $0600,x			sta 	xsStatus,x
.1940	68		pla				pla
.1941	9d 01 06	sta $0601,x			sta 	xsStatus+1,x
.1944	8a		txa				txa 								; go forward to the next stack chunk.
.1945	18		clc				clc
.1946	69 20		adc #$20			adc 	#stackSize
.1948	aa		tax				tax
.1949	88		dey				dey 								; do it for the whole of this stack
.194a	d0 ea		bne $1936			bne 	_SSTLoop
.194c	7a		ply				ply
.194d	fa		plx				plx
.194e	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: expression/integer/random.asm

.194f					RandomNumber:
.194f	20 62 19	jsr $1962			jsr 	AdvanceRandomSeed 			; bytes seperately as zero problem.
.1952	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.1955	20 62 19	jsr $1962			jsr 	AdvanceRandomSeed
.1958	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.195b	9e 00 06	stz $0600,x			stz 	xsStatus,x
.195e	20 26 14	jsr $1426			jsr 	SyntaxCheckRightBracket 	; check followed by )
.1961	60		rts				rts
.1962					AdvanceRandomSeed:
.1962	a5 0c		lda $0c				lda 	randomSeed
.1964	05 0d		ora $0d				ora 	randomSeed+1
.1966	d0 08		bne $1970			bne 	_RH_NoInit
.1968	a9 7c		lda #$7c			lda 	#$7C
.196a	85 0c		sta $0c				sta 	randomSeed
.196c	a9 a1		lda #$a1			lda 	#$A1
.196e	85 0d		sta $0d				sta 	randomSeed+1
.1970					_RH_NoInit:
.1970	a5 0c		lda $0c				lda 	randomSeed
.1972	4a		lsr a		        lsr		a
.1973	26 0d		rol $0d		        rol 	randomSeed+1
.1975	90 02		bcc $1979	        bcc 	_RH_NoEor
.1977	49 b4		eor #$b4	        eor 	#$B4
.1979					_RH_NoEor:
.1979	85 0c		sta $0c		        sta 	randomSeed
.197b	45 0d		eor $0d		        eor 	randomSeed+1
.197d	60		rts		        rts

;******  Return to file: files.asm


;******  Processing file: expression/integer/tostring.asm

.197e					PrintYA:
.197e	a2 00		ldx #$00			ldx 	#0 							; put on stack.
.1980	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.1983	98		tya				tya
.1984	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.1987	9e 00 06	stz $0600,x			stz 	xsStatus,x 					; tell system it is an integer.
.198a	a9 0a		lda #$0a			lda 	#10 						; base
.198c	20 93 19	jsr $1993			jsr 	ConvertIntegerUnsigned 		; unsigned integer conversion.
.198f	20 04 14	jsr $1404			jsr 	EXPrintString 				; print the result
.1992	60		rts				rts
.1993					ConvertIntegerUnsigned:
.1993	da		phx				phx
.1994	48		pha				pha 								; save base on stack
.1995	64 0b		stz $0b				stz 	convertPtr 					; reset conversion position
.1997	80 11		bra $19aa			bra 	CIMain
.1999					ConvertIntegerSigned:
.1999	da		phx				phx
.199a	48		pha				pha 								; save base on stack.
.199b	64 0b		stz $0b				stz 	convertPtr 					; reset conversion position
.199d	bd 40 06	lda $0640,x			lda 	xsIntHigh,x 				; is it -ve ?
.19a0	10 08		bpl $19aa			bpl 	CIMain
.19a2	20 96 18	jsr $1896			jsr 	IntegerNegate 				; make it positive
.19a5	a9 2d		lda #$2d			lda 	#"-" 						; write a - sign out.
.19a7	20 e3 19	jsr $19e3			jsr 	CIWriteCharacter
.19aa					CIMain:
.19aa	7a		ply				ply									; get base back
.19ab	a9 ff		lda #$ff			lda 	#$FF 						; push marker on stack.
.19ad	48		pha				pha
.19ae	5a		phy				phy  								; push base back.
.19af					_CILoop:
.19af	68		pla				pla 								; get and save base.
.19b0	48		pha				pha
.19b1	9d 21 06	sta $0621,x			sta 	xsIntLow+1,x 				; put it in the next stack level and set type
.19b4	9e 41 06	stz $0641,x			stz 	xsIntHigh+1,x
.19b7	9e 00 06	stz $0600,x			stz 	xsStatus,x
.19ba	20 33 18	jsr $1833			jsr 	UnsignedIntegerDivide 		; divide.
.19bd	7a		ply				ply 								; get base into Y
.19be	a5 02		lda $02				lda 	zTemp1 						; push the remainder on the stack.
.19c0	48		pha				pha
.19c1	5a		phy				phy 								; push the base back.
.19c2	bd 20 06	lda $0620,x			lda 	xsIntLow,x 					; complete
.19c5	1d 40 06	ora $0640,x			ora 	xsIntHigh,x
.19c8	d0 e5		bne $19af			bne 	_CILoop
.19ca	68		pla				pla 								; throw the base
.19cb					_CIUnpack:
.19cb	68		pla				pla 								; pull off stack so in the right order
.19cc	30 0f		bmi $19dd			bmi 	_CIExit
.19ce	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.19d0	90 03		bcc $19d5			bcc 	_CINotAlpha
.19d2	18		clc				clc
.19d3	69 07		adc #$07			adc 	#7
.19d5					_CINotAlpha:
.19d5	18		clc				clc
.19d6	69 30		adc #$30			adc 	#48
.19d8	20 e3 19	jsr $19e3			jsr 	CIWriteCharacter 			; keep going till reach the marker
.19db	80 ee		bra $19cb			bra 	_CIUnpack
.19dd					_CIExit:
.19dd	fa		plx				plx
.19de	a9 00		lda #$00			lda 	#textBuffer & $FF 			; return with pointer in YA
.19e0	a0 08		ldy #$08			ldy 	#textBuffer >> 8
.19e2	60		rts				rts
.19e3					CIWriteCharacter:
.19e3	da		phx				phx
.19e4	a6 0b		ldx $0b				ldx		convertPtr
.19e6	9d 00 08	sta $0800,x			sta 	textBuffer,x
.19e9	9e 01 08	stz $0801,x			stz 	textBuffer+1,x
.19ec	fa		plx				plx
.19ed	e6 0b		inc $0b				inc 	convertPtr
.19ef	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: expression/integer/unary.asm

.19f0					Dummy_Binary:
.19f0					Dummy_Hex:
.19f0	20 a2 16	jsr $16a2			jsr 	EvaluateTermAtX
.19f3	60		rts				rts
.19f4					Parenthesis:
.19f4	20 d4 15	jsr $15d4			jsr 	EvaluateExpressionAtX 		; parenthesised expression
.19f7	20 26 14	jsr $1426			jsr 	SyntaxCheckRightBracket 	; check followed by )
.19fa	60		rts				rts
.19fb					AbsoluteValue:
.19fb	20 d4 15	jsr $15d4			jsr 	EvaluateExpressionAtX 		; evaluate the term
.19fe	20 ad 16	jsr $16ad			jsr 	DeReferenceUnary 			; convert term to value if reference.
.1a01	20 e7 16	jsr $16e7			jsr 	UnaryNumberTypeCheck 		; check numeric, returns CC if integer.
.1a04	90 03		bcc $1a09			bcc 	_Integer
.1a06	4c 10 1a	jmp $1a10			jmp 	AVFloat
.1a09					_Integer:
.1a09	20 90 18	jsr $1890			jsr 	CheckIntegerNegate 			; use absolute value in divide
.1a0c	20 26 14	jsr $1426			jsr 	SyntaxCheckRightBracket
.1a0f	60		rts				rts
.1a10					AVFloat:
.1a10	20 cd 1a	jsr $1acd			jsr 	FPAbs
.1a13	20 26 14	jsr $1426			jsr 	SyntaxCheckRightBracket
.1a16	60		rts				rts
.1a17					SignValue:
.1a17	20 d4 15	jsr $15d4			jsr 	EvaluateExpressionAtX 		; evaluate the term
.1a1a	20 ad 16	jsr $16ad			jsr 	DeReferenceUnary 			; convert term to value if reference.
.1a1d	20 e7 16	jsr $16e7			jsr 	UnaryNumberTypeCheck 		; check numeric, returns CC if integer.
.1a20	90 03		bcc $1a25			bcc 	_Integer
.1a22	4c 45 1a	jmp $1a45			jmp 	SVFloat
.1a25					_Integer:
.1a25	20 26 14	jsr $1426			jsr 	SyntaxCheckRightBracket
.1a28	bd 40 06	lda $0640,x			lda 	xsIntHigh,x 				; Check zero
.1a2b	1d 20 06	ora $0620,x			ora 	xsIntLow,x
.1a2e	f0 05		beq $1a35			beq 	_SVSetLH
.1a30	0a		asl a				asl 	a 							; msb into carry
.1a31	90 09		bcc $1a3c			bcc 	_SVGreater0 				; if CC then it's positive and non zero
.1a33	a9 ff		lda #$ff			lda 	#$FF 						; -ve so return -1
.1a35					_SVSetLH:
.1a35	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.1a38	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.1a3b	60		rts				rts
.1a3c					_SVGreater0:
.1a3c	a9 01		lda #$01			lda 	#1
.1a3e	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.1a41	9e 40 06	stz $0640,x			stz 	xsIntHigh,x
.1a44	60		rts				rts
.1a45					SVFloat:
.1a45	20 cd 1a	jsr $1acd			jsr 	FPSgn
.1a48	20 26 14	jsr $1426			jsr 	SyntaxCheckRightBracket
.1a4b	60		rts				rts
.1a4c					StringLength:
.1a4c	20 d4 15	jsr $15d4			jsr 	EvaluateExpressionAtX 		; evaluate the term
.1a4f	20 ad 16	jsr $16ad			jsr 	DeReferenceUnary 			; convert term to value if reference.
.1a52	20 0e 17	jsr $170e			jsr 	UnaryStringTypeCheck 		; check string.
.1a55	20 26 14	jsr $1426			jsr 	SyntaxCheckRightBracket
.1a58	bd 20 06	lda $0620,x			lda 	xsAddrLow,x 				; put address of string into zTemp1
.1a5b	85 02		sta $02				sta 	zTemp1
.1a5d	bd 40 06	lda $0640,x			lda 	xsAddrHigh,x
.1a60	85 03		sta $03				sta 	zTemp1+1
.1a62	b2 02		lda ($02)			lda 	(zTemp1)					; get the length (strings are len prefixed)
.1a64	9d 20 06	sta $0620,x			sta 	xsIntLow,x 					; and return it
.1a67	9e 40 06	stz $0640,x			stz 	xsIntHigh,x
.1a6a	9e 00 06	stz $0600,x			stz 	xsStatus,x
.1a6d	60		rts				rts
.1a6e					PeekMemory:
.1a6e	18		clc				clc
.1a6f	80 01		bra $1a72			bra 	ReadMemoryMain
.1a71					DeekMemory:
.1a71	38		sec				sec
.1a72					ReadMemoryMain:
.1a72	08		php				php 								; CS read word CC read byte
.1a73	20 d4 15	jsr $15d4			jsr 	EvaluateExpressionAtX 		; evaluate the term
.1a76	20 ad 16	jsr $16ad			jsr 	DeReferenceUnary 			; convert term to value if reference.
.1a79	20 e7 16	jsr $16e7			jsr 	UnaryNumberTypeCheck 		; check numeric, returns CC if integer.
.1a7c	90 03		bcc $1a81			bcc 	_Integer
.1a7e	4c cf 12	jmp $12cf			jmp 	ParameterError
.1a81					_Integer:
.1a81	20 26 14	jsr $1426			jsr 	SyntaxCheckRightBracket
.1a84	bd 20 06	lda $0620,x			lda 	xsAddrLow,x 				; transfer address
.1a87	85 02		sta $02				sta 	zTemp1
.1a89	bd 40 06	lda $0640,x			lda 	xsAddrHigh,x
.1a8c	85 03		sta $03				sta 	zTemp1+1
.1a8e	b2 02		lda ($02)			lda 	(zTemp1) 					; do the LSB
.1a90	9d 20 06	sta $0620,x			sta 	xsIntLow,x
.1a93	9e 40 06	stz $0640,x			stz 	xsIntHigh,x 				; zero MSB
.1a96	9e 00 06	stz $0600,x			stz 	xsStatus,x 					; set the type
.1a99	28		plp				plp
.1a9a	90 09		bcc $1aa5			bcc 	_RMMPeek 					; read type
.1a9c	5a		phy				phy
.1a9d	a0 01		ldy #$01			ldy 	#1
.1a9f	b1 02		lda ($02),y			lda 	(zTemp1),y
.1aa1	9d 40 06	sta $0640,x			sta 	xsIntHigh,x
.1aa4	7a		ply				ply
.1aa5					_RMMPeek:
.1aa5	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: variables/variable.asm

.1aa6					VariableLookup:
.1aa6	c9 1a		cmp #$1a			cmp 	#26 						; multi character variables.
.1aa8	b0 13		bcs $1abd			bcs 	_VLError
.1aaa	0a		asl a				asl 	a 							; multiply by 5, do not move for float
.1aab	0a		asl a				asl 	a
.1aac	71 00		adc ($00),y			adc 	(codePtr),y
.1aae	c8		iny				iny 								; skip over variable token
.1aaf	9d 20 06	sta $0620,x			sta 	xsAddrLow,x
.1ab2	a9 07		lda #$07			lda 	#variables >> 8
.1ab4	9d 40 06	sta $0640,x			sta 	xsAddrHigh,x
.1ab7	a9 01		lda #$01			lda 	#$01 						; integer reference.
.1ab9	9d 00 06	sta $0600,x			sta 	xsStatus,x
.1abc	60		rts				rts
.1abd					_VLError:
.1abd	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>1ac0	42 61 64 20 56 61 72 69				.text 	"Bad Variable",0
>1ac8	61 62 6c 65 00

;******  Return to file: files.asm


;******  Processing file: expression/float/floatdummy.asm

.1acd					FPAdd:
.1acd					FPSub:
.1acd					FPMultiply:
.1acd					FPDivide:
.1acd					FPModulus:
.1acd					FPAbs:
.1acd					FPSgn:
.1acd					FPFloatToInteger:
.1acd					FPIntegerToFloat:
.1acd					FPEquality:
.1acd					FPMagnitude:
.1acd	20 dc 12	jsr $12dc			jsr 	ErrorHandler
>1ad0	46 6c 6f 61 74 20 4e 6f				.text 	"Float Not Implemented",0
>1ad8	74 20 49 6d 70 6c 65 6d 65 6e 74 65 64 00

;******  Return to file: files.asm


;******  Return to file: basic.asm

.1ae6					ColdStart:
.1ae6	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack
.1ae8	9a		txs				txs
.1ae9	20 11 13	jsr $1311			jsr 	ExternInitialise
.1aec	a9 f9		lda #$f9			lda 	#BootMessage & $FF
.1aee	a0 1a		ldy #$1a			ldy 	#BootMessage >> 8
.1af0	20 04 14	jsr $1404			jsr 	EXPrintString
.1af3	4c 8a 15	jmp $158a			jmp 	Command_Run
.1af6					WarmStart:
.1af6	4c ff ff	jmp $ffff			jmp 	$FFFF
.1af9					BootMessage:
>1af9	2a 2a 2a 2a 20 43 6f 6d				.text 	"**** Commander X16 Basic ****",13,13
>1b01	6d 61 6e 64 65 72 20 58 31 36 20 42 61 73 69 63
>1b11	20 2a 2a 2a 2a 0d 0d
>1b18	35 31 32 4b 20 48 69 67				.text 	"512K High RAM.",13,13
>1b20	68 20 52 41 4d 2e 0d 0d
>1b28	50 72 65 2d 41 6c 70 68				.text 	"Pre-Alpha. "
>1b30	61 2e 20

;******  Processing file: generated/buildinfo.inc

>1b33	42 75 69 6c 64 3a 31 37			.text	"Build:174 (08-Feb-20 18:20)"
>1b3b	34 20 28 30 38 2d 46 65 62 2d 32 30 20 31 38 3a
>1b4b	32 30 29

;******  Return to file: basic.asm

>1b4e	0d 0d 00					.byte 	13,13,0
.1b51					BasicProgram:

;******  End of listing
