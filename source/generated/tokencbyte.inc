;
;	Generated automatically.
;
	.byte	$00		; $80 : (eol)
	.byte	$40		; $81 : %
	.byte	$00		; $82 : %(
	.byte	$40		; $83 : $
	.byte	$00		; $84 : $(
	.byte	$00		; $85 : #
	.byte	$00		; $86 : #(
	.byte	$40		; $87 : (
	.byte	$00		; $88 : )
	.byte	$00		; $89 : :
	.byte	$00		; $8a : ,
	.byte	$00		; $8b : ;
	.byte	$11		; $8c : and
	.byte	$11		; $8d : or
	.byte	$11		; $8e : xor
	.byte	$12		; $8f : >
	.byte	$12		; $90 : >=
	.byte	$12		; $91 : <
	.byte	$12		; $92 : <=
	.byte	$12		; $93 : =
	.byte	$12		; $94 : <>
	.byte	$13		; $95 : +
	.byte	$13		; $96 : -
	.byte	$14		; $97 : *
	.byte	$14		; $98 : /
	.byte	$14		; $99 : mod
	.byte	$40		; $9a : len(
	.byte	$40		; $9b : rnd(
	.byte	$40		; $9c : asc(
	.byte	$40		; $9d : chr$(
	.byte	$40		; $9e : val(
	.byte	$40		; $9f : str$(
	.byte	$40		; $a0 : spc(
	.byte	$40		; $a1 : left$(
	.byte	$40		; $a2 : mid$(
	.byte	$40		; $a3 : right$(
	.byte	$40		; $a4 : abs(
	.byte	$40		; $a5 : sgn(
	.byte	$40		; $a6 : int(
	.byte	$40		; $a7 : random(
	.byte	$40		; $a8 : deek(
	.byte	$40		; $a9 : peek(
	.byte	$40		; $aa : vpeek(
	.byte	$82		; $ab : if
	.byte	$82		; $ac : repeat
	.byte	$82		; $ad : for
	.byte	$82		; $ae : while
	.byte	$82		; $af : case
	.byte	$80		; $b0 : then
	.byte	$80		; $b1 : endif
	.byte	$80		; $b2 : until
	.byte	$80		; $b3 : next
	.byte	$80		; $b4 : endwhile
	.byte	$80		; $b5 : endcase
	.byte	$81		; $b6 : to
	.byte	$81		; $b7 : step
	.byte	$81		; $b8 : proc
	.byte	$81		; $b9 : endproc
	.byte	$81		; $ba : call
	.byte	$81		; $bb : local
	.byte	$81		; $bc : run
	.byte	$81		; $bd : stop
	.byte	$81		; $be : end
	.byte	$81		; $bf : print
	.byte	$81		; $c0 : input
	.byte	$81		; $c1 : when
	.byte	$81		; $c2 : default
	.byte	$81		; $c3 : let
	.byte	$81		; $c4 : option
	.byte	$81		; $c5 : list
	.byte	$81		; $c6 : load
	.byte	$81		; $c7 : save
	.byte	$81		; $c8 : new
	.byte	$81		; $c9 : old
	.byte	$81		; $ca : poke
	.byte	$81		; $cb : doke
	.byte	$81		; $cc : vpoke
	.byte	$81		; $cd : rem
	.byte	$81		; $ce : goto
	.byte	$81		; $cf : gosub
	.byte	$81		; $d0 : sys
	.byte	$81		; $d1 : return
	.byte	$81		; $d2 : assert
	.byte	$81		; $d3 : on
	.byte	$81		; $d4 : open
	.byte	$81		; $d5 : close
	.byte	$81		; $d6 : dir
	.byte	$81		; $d7 : dim
	.byte	$81		; $d8 : read
	.byte	$81		; $d9 : data
	.byte	$81		; $da : restore
