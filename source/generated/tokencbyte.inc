	.byte	$00		; $80 : {eol}
	.byte	$10		; $81 : and
	.byte	$10		; $82 : or
	.byte	$10		; $83 : xor
	.byte	$11		; $84 : >
	.byte	$11		; $85 : >=
	.byte	$11		; $86 : <
	.byte	$11		; $87 : <=
	.byte	$11		; $88 : =
	.byte	$11		; $89 : <>
	.byte	$12		; $8a : +
	.byte	$12		; $8b : -
	.byte	$13		; $8c : *
	.byte	$13		; $8d : /
	.byte	$13		; $8e : mod
	.byte	$40		; $8f : len(
	.byte	$40		; $90 : rnd(
	.byte	$40		; $91 : asc(
	.byte	$40		; $92 : chr$(
	.byte	$40		; $93 : val(
	.byte	$40		; $94 : str$(
	.byte	$40		; $95 : spc(
	.byte	$40		; $96 : left$(
	.byte	$40		; $97 : mid$(
	.byte	$40		; $98 : right$(
	.byte	$40		; $99 : abs(
	.byte	$40		; $9a : sgn(
	.byte	$40		; $9b : int(
	.byte	$40		; $9c : deek(
	.byte	$40		; $9d : peek(
	.byte	$40		; $9e : vpeek(
	.byte	$82		; $9f : if
	.byte	$82		; $a0 : repeat
	.byte	$82		; $a1 : for
	.byte	$82		; $a2 : while
	.byte	$82		; $a3 : case
	.byte	$80		; $a4 : then
	.byte	$80		; $a5 : endif
	.byte	$80		; $a6 : until
	.byte	$80		; $a7 : next
	.byte	$80		; $a8 : endwhile
	.byte	$80		; $a9 : endcase
	.byte	$81		; $aa : to
	.byte	$81		; $ab : step
	.byte	$81		; $ac : defproc
	.byte	$81		; $ad : endproc
	.byte	$81		; $ae : proc
	.byte	$81		; $af : local
	.byte	$81		; $b0 : let
	.byte	$81		; $b1 : run
	.byte	$81		; $b2 : stop
	.byte	$81		; $b3 : end
	.byte	$81		; $b4 : print
	.byte	$81		; $b5 : input
	.byte	$81		; $b6 : when
	.byte	$81		; $b7 : default
	.byte	$81		; $b8 : option
	.byte	$81		; $b9 : list
	.byte	$81		; $ba : load
	.byte	$81		; $bb : save
	.byte	$81		; $bc : new
	.byte	$81		; $bd : old
	.byte	$81		; $be : poke
	.byte	$81		; $bf : doke
	.byte	$81		; $c0 : vpoke
