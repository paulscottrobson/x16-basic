;
;	Generated automatically.
;
	.byte	$00		; $80 : (eol)
	.byte	$00		; $81 : )
	.byte	$00		; $82 : :
	.byte	$00		; $83 : ,
	.byte	$00		; $84 : ;
	.byte	$00		; $85 : #
	.byte	$11		; $86 : and
	.byte	$11		; $87 : or
	.byte	$11		; $88 : xor
	.byte	$12		; $89 : >
	.byte	$12		; $8a : >=
	.byte	$12		; $8b : <
	.byte	$12		; $8c : <=
	.byte	$12		; $8d : =
	.byte	$12		; $8e : <>
	.byte	$13		; $8f : +
	.byte	$13		; $90 : -
	.byte	$14		; $91 : *
	.byte	$14		; $92 : /
	.byte	$14		; $93 : mod
	.byte	$40		; $94 : len(
	.byte	$40		; $95 : rnd(
	.byte	$40		; $96 : asc(
	.byte	$40		; $97 : chr$(
	.byte	$40		; $98 : val(
	.byte	$40		; $99 : str$(
	.byte	$40		; $9a : spc(
	.byte	$40		; $9b : left$(
	.byte	$40		; $9c : mid$(
	.byte	$40		; $9d : right$(
	.byte	$40		; $9e : abs(
	.byte	$40		; $9f : sgn(
	.byte	$40		; $a0 : int(
	.byte	$40		; $a1 : deek(
	.byte	$40		; $a2 : peek(
	.byte	$40		; $a3 : vpeek(
	.byte	$40		; $a4 : (
	.byte	$40		; $a5 : %
	.byte	$40		; $a6 : $
	.byte	$82		; $a7 : if
	.byte	$82		; $a8 : repeat
	.byte	$82		; $a9 : for
	.byte	$82		; $aa : while
	.byte	$82		; $ab : case
	.byte	$80		; $ac : then
	.byte	$80		; $ad : endif
	.byte	$80		; $ae : until
	.byte	$80		; $af : next
	.byte	$80		; $b0 : endwhile
	.byte	$80		; $b1 : endcase
	.byte	$81		; $b2 : to
	.byte	$81		; $b3 : step
	.byte	$81		; $b4 : proc
	.byte	$81		; $b5 : endproc
	.byte	$81		; $b6 : call
	.byte	$81		; $b7 : local
	.byte	$81		; $b8 : run
	.byte	$81		; $b9 : stop
	.byte	$81		; $ba : end
	.byte	$81		; $bb : print
	.byte	$81		; $bc : input
	.byte	$81		; $bd : when
	.byte	$81		; $be : default
	.byte	$81		; $bf : let
	.byte	$81		; $c0 : option
	.byte	$81		; $c1 : list
	.byte	$81		; $c2 : load
	.byte	$81		; $c3 : save
	.byte	$81		; $c4 : new
	.byte	$81		; $c5 : old
	.byte	$81		; $c6 : poke
	.byte	$81		; $c7 : doke
	.byte	$81		; $c8 : vpoke
	.byte	$81		; $c9 : rem
	.byte	$81		; $ca : goto
	.byte	$81		; $cb : gosub
	.byte	$81		; $cc : sys
	.byte	$81		; $cd : return
	.byte	$81		; $ce : assert
	.byte	$81		; $cf : on
	.byte	$81		; $d0 : open
	.byte	$81		; $d1 : close
	.byte	$81		; $d2 : dir
	.byte	$81		; $d3 : dim
	.byte	$81		; $d4 : read
	.byte	$81		; $d5 : data
	.byte	$81		; $d6 : restore
