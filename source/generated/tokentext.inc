;
;	Generated automatically.
;
	.byte	$05,$28,$45,$4f,$4c,$a9                  ; $80 : (eol)
	.byte	$03,$41,$4e,$c4                          ; $81 : and
	.byte	$02,$4f,$d2                              ; $82 : or
	.byte	$03,$58,$4f,$d2                          ; $83 : xor
	.byte	$01,$be                                  ; $84 : >
	.byte	$02,$3e,$bd                              ; $85 : >=
	.byte	$01,$bc                                  ; $86 : <
	.byte	$02,$3c,$bd                              ; $87 : <=
	.byte	$01,$bd                                  ; $88 : =
	.byte	$02,$3c,$be                              ; $89 : <>
	.byte	$01,$ab                                  ; $8a : +
	.byte	$01,$ad                                  ; $8b : -
	.byte	$01,$aa                                  ; $8c : *
	.byte	$01,$af                                  ; $8d : /
	.byte	$03,$4d,$4f,$c4                          ; $8e : mod
	.byte	$04,$4c,$45,$4e,$a8                      ; $8f : len(
	.byte	$04,$52,$4e,$44,$a8                      ; $90 : rnd(
	.byte	$04,$41,$53,$43,$a8                      ; $91 : asc(
	.byte	$05,$43,$48,$52,$24,$a8                  ; $92 : chr$(
	.byte	$04,$56,$41,$4c,$a8                      ; $93 : val(
	.byte	$05,$53,$54,$52,$24,$a8                  ; $94 : str$(
	.byte	$04,$53,$50,$43,$a8                      ; $95 : spc(
	.byte	$06,$4c,$45,$46,$54,$24,$a8              ; $96 : left$(
	.byte	$05,$4d,$49,$44,$24,$a8                  ; $97 : mid$(
	.byte	$07,$52,$49,$47,$48,$54,$24,$a8          ; $98 : right$(
	.byte	$04,$41,$42,$53,$a8                      ; $99 : abs(
	.byte	$04,$53,$47,$4e,$a8                      ; $9a : sgn(
	.byte	$04,$49,$4e,$54,$a8                      ; $9b : int(
	.byte	$05,$44,$45,$45,$4b,$a8                  ; $9c : deek(
	.byte	$05,$50,$45,$45,$4b,$a8                  ; $9d : peek(
	.byte	$06,$56,$50,$45,$45,$4b,$a8              ; $9e : vpeek(
	.byte	$01,$a8                                  ; $9f : (
	.byte	$01,$a5                                  ; $a0 : %
	.byte	$01,$a4                                  ; $a1 : $
	.byte	$02,$49,$c6                              ; $a2 : if
	.byte	$06,$52,$45,$50,$45,$41,$d4              ; $a3 : repeat
	.byte	$03,$46,$4f,$d2                          ; $a4 : for
	.byte	$05,$57,$48,$49,$4c,$c5                  ; $a5 : while
	.byte	$04,$43,$41,$53,$c5                      ; $a6 : case
	.byte	$04,$54,$48,$45,$ce                      ; $a7 : then
	.byte	$05,$45,$4e,$44,$49,$c6                  ; $a8 : endif
	.byte	$05,$55,$4e,$54,$49,$cc                  ; $a9 : until
	.byte	$04,$4e,$45,$58,$d4                      ; $aa : next
	.byte	$08,$45,$4e,$44,$57,$48,$49,$4c,$c5      ; $ab : endwhile
	.byte	$07,$45,$4e,$44,$43,$41,$53,$c5          ; $ac : endcase
	.byte	$02,$54,$cf                              ; $ad : to
	.byte	$04,$53,$54,$45,$d0                      ; $ae : step
	.byte	$07,$44,$45,$46,$50,$52,$4f,$c3          ; $af : defproc
	.byte	$07,$45,$4e,$44,$50,$52,$4f,$c3          ; $b0 : endproc
	.byte	$04,$50,$52,$4f,$c3                      ; $b1 : proc
	.byte	$05,$4c,$4f,$43,$41,$cc                  ; $b2 : local
	.byte	$03,$4c,$45,$d4                          ; $b3 : let
	.byte	$03,$52,$55,$ce                          ; $b4 : run
	.byte	$04,$53,$54,$4f,$d0                      ; $b5 : stop
	.byte	$03,$45,$4e,$c4                          ; $b6 : end
	.byte	$05,$50,$52,$49,$4e,$d4                  ; $b7 : print
	.byte	$05,$49,$4e,$50,$55,$d4                  ; $b8 : input
	.byte	$04,$57,$48,$45,$ce                      ; $b9 : when
	.byte	$07,$44,$45,$46,$41,$55,$4c,$d4          ; $ba : default
	.byte	$06,$4f,$50,$54,$49,$4f,$ce              ; $bb : option
	.byte	$04,$4c,$49,$53,$d4                      ; $bc : list
	.byte	$04,$4c,$4f,$41,$c4                      ; $bd : load
	.byte	$04,$53,$41,$56,$c5                      ; $be : save
	.byte	$03,$4e,$45,$d7                          ; $bf : new
	.byte	$03,$4f,$4c,$c4                          ; $c0 : old
	.byte	$04,$50,$4f,$4b,$c5                      ; $c1 : poke
	.byte	$04,$44,$4f,$4b,$c5                      ; $c2 : doke
	.byte	$05,$56,$50,$4f,$4b,$c5                  ; $c3 : vpoke
	.byte	$03,$52,$45,$cd                          ; $c4 : rem
	.byte	$04,$47,$4f,$54,$cf                      ; $c5 : goto
	.byte	$05,$47,$4f,$53,$55,$c2                  ; $c6 : gosub
	.byte	$03,$53,$59,$d3                          ; $c7 : sys
	.byte	$06,$52,$45,$54,$55,$52,$ce              ; $c8 : return
	.byte	$01,$a9                                  ; $c9 : )
	.byte	$01,$ba                                  ; $ca : :
	.byte	$00
