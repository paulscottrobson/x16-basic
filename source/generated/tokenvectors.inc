;
;	Generated automatically.
;
	.word	SyntaxError             		; $80 : (eol)
	.word	SyntaxError             		; $81 : )
	.word	SyntaxError             		; $82 : :
	.word	SyntaxError             		; $83 : ,
	.word	SyntaxError             		; $84 : ;
	.word	SyntaxError             		; $85 : #
	.word	BinaryAnd               		; $86 : and
	.word	BinaryOr                		; $87 : or
	.word	BinaryXor               		; $88 : xor
	.word	Compare_Greater         		; $89 : >
	.word	Compare_GreaterEquals   		; $8a : >=
	.word	Compare_Less            		; $8b : <
	.word	Compare_LessEquals      		; $8c : <=
	.word	Compare_Equals          		; $8d : =
	.word	Compare_NotEquals       		; $8e : <>
	.word	BinaryAdd               		; $8f : +
	.word	BinarySub               		; $90 : -
	.word	Multiply16x16           		; $91 : *
	.word	Divide16x16             		; $92 : /
	.word	Modulus16x16            		; $93 : mod
	.word	StringLength            		; $94 : len(
	.word	SyntaxError             		; $95 : rnd(
	.word	SyntaxError             		; $96 : asc(
	.word	SyntaxError             		; $97 : chr$(
	.word	SyntaxError             		; $98 : val(
	.word	SyntaxError             		; $99 : str$(
	.word	SyntaxError             		; $9a : spc(
	.word	SyntaxError             		; $9b : left$(
	.word	SyntaxError             		; $9c : mid$(
	.word	SyntaxError             		; $9d : right$(
	.word	AbsoluteValue           		; $9e : abs(
	.word	SignValue               		; $9f : sgn(
	.word	SyntaxError             		; $a0 : int(
	.word	RandomNumber            		; $a1 : random(
	.word	DeekMemory              		; $a2 : deek(
	.word	PeekMemory              		; $a3 : peek(
	.word	SyntaxError             		; $a4 : vpeek(
	.word	Parenthesis             		; $a5 : (
	.word	Dummy_Binary            		; $a6 : %
	.word	Dummy_Hex               		; $a7 : $
	.word	SyntaxError             		; $a8 : if
	.word	SyntaxError             		; $a9 : repeat
	.word	SyntaxError             		; $aa : for
	.word	SyntaxError             		; $ab : while
	.word	SyntaxError             		; $ac : case
	.word	SyntaxError             		; $ad : then
	.word	SyntaxError             		; $ae : endif
	.word	SyntaxError             		; $af : until
	.word	SyntaxError             		; $b0 : next
	.word	SyntaxError             		; $b1 : endwhile
	.word	SyntaxError             		; $b2 : endcase
	.word	SyntaxError             		; $b3 : to
	.word	SyntaxError             		; $b4 : step
	.word	SyntaxError             		; $b5 : proc
	.word	SyntaxError             		; $b6 : endproc
	.word	SyntaxError             		; $b7 : call
	.word	SyntaxError             		; $b8 : local
	.word	Command_RUN             		; $b9 : run
	.word	Command_STOP            		; $ba : stop
	.word	Command_END             		; $bb : end
	.word	SyntaxError             		; $bc : print
	.word	SyntaxError             		; $bd : input
	.word	SyntaxError             		; $be : when
	.word	SyntaxError             		; $bf : default
	.word	SyntaxError             		; $c0 : let
	.word	SyntaxError             		; $c1 : option
	.word	SyntaxError             		; $c2 : list
	.word	SyntaxError             		; $c3 : load
	.word	SyntaxError             		; $c4 : save
	.word	SyntaxError             		; $c5 : new
	.word	SyntaxError             		; $c6 : old
	.word	Command_Poke            		; $c7 : poke
	.word	Command_Doke            		; $c8 : doke
	.word	SyntaxError             		; $c9 : vpoke
	.word	Command_Rem             		; $ca : rem
	.word	Command_GOTO            		; $cb : goto
	.word	SyntaxError             		; $cc : gosub
	.word	SyntaxError             		; $cd : sys
	.word	SyntaxError             		; $ce : return
	.word	Command_Assert          		; $cf : assert
	.word	SyntaxError             		; $d0 : on
	.word	SyntaxError             		; $d1 : open
	.word	SyntaxError             		; $d2 : close
	.word	SyntaxError             		; $d3 : dir
	.word	SyntaxError             		; $d4 : dim
	.word	SyntaxError             		; $d5 : read
	.word	SyntaxError             		; $d6 : data
	.word	SyntaxError             		; $d7 : restore
